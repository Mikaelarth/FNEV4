#!/usr/bin/env python3
"""
Test de validation - Acc√®s centralis√© √† la base de donn√©es
Menu Maintenance > Base de donn√©es

V√©rification que le sous-menu utilise bien le syst√®me centralis√©.
"""

import os
import sqlite3
import json
from datetime import datetime

def test_centralized_database_access():
    """Test de l'acc√®s centralis√© √† la base de donn√©es."""
    
    print("üîç Test d'Acc√®s Centralis√© √† la Base de Donn√©es")
    print("=" * 60)
    
    # 1. V√©rifier le chemin centralis√©
    centralized_db_path = r"C:\wamp64\www\FNEV4\data\FNEV4.db"
    
    print(f"üìç Chemin centralis√© attendu : {centralized_db_path}")
    
    if not os.path.exists(centralized_db_path):
        print("‚ùå ERREUR: Base de donn√©es centralis√©e non trouv√©e!")
        return False
    
    print("‚úÖ Base de donn√©es centralis√©e trouv√©e")
    
    # 2. V√©rifier la structure de la base
    try:
        conn = sqlite3.connect(centralized_db_path)
        cursor = conn.cursor()
        
        # Obtenir la liste des tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        print(f"üìä Nombre de tables trouv√©es : {len(tables)}")
        print(f"üìã Tables : {', '.join(tables)}")
        
        # V√©rifier des tables cl√©s
        key_tables = ['Clients', 'Factures', 'Articles']
        missing_tables = []
        
        for table in key_tables:
            if table not in tables:
                missing_tables.append(table)
            else:
                # Compter les enregistrements
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"   ‚úÖ {table}: {count} enregistrements")
        
        if missing_tables:
            print(f"‚ö†Ô∏è  Tables manquantes : {missing_tables}")
        
        # 3. Tester l'int√©grit√©
        cursor.execute("PRAGMA integrity_check")
        integrity_result = cursor.fetchone()[0]
        
        if integrity_result == "ok":
            print("‚úÖ Int√©grit√© de la base : OK")
        else:
            print(f"‚ùå Probl√®me d'int√©grit√© : {integrity_result}")
        
        # 4. Informations de la base
        cursor.execute("PRAGMA database_list")
        db_info = cursor.fetchall()
        
        # Taille du fichier
        file_size = os.path.getsize(centralized_db_path)
        size_kb = round(file_size / 1024, 2)
        
        print(f"üíæ Taille de la base : {size_kb} KB")
        
        # Version SQLite
        cursor.execute("SELECT sqlite_version()")
        sqlite_version = cursor.fetchone()[0]
        print(f"‚öôÔ∏è  Version SQLite : {sqlite_version}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'acc√®s √† la base : {e}")
        return False
    
    # 5. V√©rifier qu'il n'y a plus de bases de donn√©es multiples
    data_dir = r"C:\wamp64\www\FNEV4\data"
    db_files = []
    
    if os.path.exists(data_dir):
        for file in os.listdir(data_dir):
            if file.endswith('.db') and not file.startswith('backup_'):
                db_files.append(file)
    
    print(f"üóÇÔ∏è  Fichiers .db dans /data : {db_files}")
    
    if len(db_files) == 1 and db_files[0] == "FNEV4.db":
        print("‚úÖ SUCC√àS: Une seule base de donn√©es principale")
        centralized = True
    elif len(db_files) > 1:
        print(f"‚ö†Ô∏è  ATTENTION: {len(db_files)} fichiers de base trouv√©s")
        print("   La centralisation pourrait √™tre incompl√®te")
        centralized = False
    else:
        print("‚ùå ERREUR: Aucune base de donn√©es principale trouv√©e")
        centralized = False
    
    # 6. V√©rifier les services d'injection de d√©pendances
    print("\nüîß V√©rification de l'Architecture Centralis√©e")
    print("-" * 40)
    
    # V√©rifier les fichiers cl√©s
    key_files = [
        ("DatabasePathProvider.cs", "src/FNEV4.Infrastructure/Services/DatabasePathProvider.cs"),
        ("PathConfigurationService.cs", "src/FNEV4.Infrastructure/Services/PathConfigurationService.cs"),
        ("BaseDonneesViewModel.cs", "src/FNEV4.Presentation/ViewModels/Maintenance/BaseDonneesViewModel.cs"),
        ("App.xaml.cs", "src/FNEV4.Presentation/App.xaml.cs")
    ]
    
    architecture_ok = True
    
    for file_name, file_path in key_files:
        full_path = os.path.join(r"C:\wamp64\www\FNEV4", file_path)
        if os.path.exists(full_path):
            print(f"   ‚úÖ {file_name}")
        else:
            print(f"   ‚ùå {file_name} MANQUANT")
            architecture_ok = False
    
    # R√©sultat final
    print("\n" + "=" * 60)
    
    if centralized and architecture_ok:
        print("üéâ R√âSULTAT: Centralisation R√âUSSIE !")
        print("‚úÖ Le menu 'Maintenance > Base de donn√©es' utilise le syst√®me centralis√©")
        
        # Cr√©er un rapport de validation
        validation_report = {
            "timestamp": datetime.now().isoformat(),
            "test": "Centralisation Base de Donn√©es",
            "status": "SUCCESS",
            "database_path": centralized_db_path,
            "database_size_kb": size_kb,
            "table_count": len(tables),
            "tables": tables,
            "sqlite_version": sqlite_version,
            "integrity": integrity_result,
            "architecture_files": "OK"
        }
        
        with open("validation_centralization_database.json", "w", encoding="utf-8") as f:
            json.dump(validation_report, f, indent=2, ensure_ascii=False)
        
        print("üìÑ Rapport de validation g√©n√©r√© : validation_centralization_database.json")
        return True
        
    else:
        print("‚ùå R√âSULTAT: Centralisation INCOMPL√àTE")
        if not centralized:
            print("   - Probl√®me de centralisation des fichiers de base")
        if not architecture_ok:
            print("   - Probl√®me d'architecture/fichiers manquants")
        return False

if __name__ == "__main__":
    success = test_centralized_database_access()
    exit(0 if success else 1)
