#!/usr/bin/env python3
"""
Comparaison compl√®te entre les donn√©es de factures stock√©es en base 
et celles affich√©es dans l'interface des d√©tails de facture
"""

import sqlite3
from pathlib import Path
import json

def compare_invoice_data_vs_display():
    db_path = Path("data/FNEV4.db")
    
    if not db_path.exists():
        print("‚ùå Base de donn√©es FNEV4.db introuvable")
        return
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        print("üîç COMPARAISON DONN√âES BASE vs INTERFACE")
        print("=" * 55)
        
        # Analyser les factures des captures d'√©cran
        factures_test = {
            "556452": {
                "interface_client": "SDTM-CI (3012Q)",
                "interface_template": "Business to Consumer",
                "interface_montant_ht": "2,437,421.00 FCFA",
                "interface_montant_tva": "62,575.92 FCFA", 
                "interface_montant_ttc": "2,499,996.92 FCFA",
                "interface_point_vente": "GSM (Fictif)",
                "interface_paiement": "Esp√®ces"
            },
            "556469": {
                "interface_client": "SOREFCI (1999)",
                "interface_template": "Business to Consumer", 
                "interface_montant_ht": "272,991.00 FCFA",
                "interface_montant_tva": "7,008.48 FCFA",
                "interface_montant_ttc": "279,999.48 FCFA",
                "interface_point_vente": "GSM (Fictif)",
                "interface_paiement": "Esp√®ces"
            }
        }
        
        for facture_num, interface_data in factures_test.items():
            print(f"\nüìÑ ANALYSE FACTURE {facture_num}")
            print("=" * 35)
            
            # R√©cup√©rer TOUTES les donn√©es de la facture
            cursor.execute("""
                SELECT 
                    f.InvoiceNumber,
                    f.Template,
                    f.InvoiceType,
                    f.PaymentMethod,
                    f.PointOfSale,
                    f.ClientCode,
                    f.TotalAmountHT,
                    f.TotalVatAmount,
                    f.TotalAmountTTC,
                    f.CommercialMessage,
                    f.InvoiceDate,
                    f.FneReference,
                    f.IsCertified,
                    f.Establishment,
                    -- Colonnes de certification
                    f.FneCertificationNumber,
                    f.FneCertificationDate,
                    f.FneQrCode,
                    f.FneDigitalSignature,
                    f.FneValidationUrl
                FROM FneInvoices f
                WHERE f.InvoiceNumber = ?
            """, (facture_num,))
            
            facture = cursor.fetchone()
            
            if not facture:
                print(f"   ‚ùå Facture {facture_num} non trouv√©e")
                continue
            
            (num, template, inv_type, payment, pos, client_code, 
             ht, tva, ttc, message, date, fne_ref, is_certified, establishment,
             cert_num, cert_date, qr_code, signature, validation_url) = facture
            
            # R√©cup√©rer les donn√©es client
            cursor.execute("""
                SELECT Name, CompanyName, ClientNcc, Phone, Email,
                       Country, DefaultCurrency, DefaultTemplate, DefaultPaymentMethod
                FROM Clients 
                WHERE ClientCode = ?
            """, (client_code,))
            
            client_info = cursor.fetchone()
            
            print(f"üóÑÔ∏è DONN√âES EN BASE DE DONN√âES")
            print("-" * 30)
            print(f"   üìã Facture:")
            print(f"      Num√©ro: {num}")
            print(f"      Date: {date}")
            print(f"      Template: '{template}'")
            print(f"      Type: '{inv_type}'")
            print(f"      Paiement: '{payment}'")
            print(f"      Point de vente: '{pos}'")
            print(f"      √âtablissement: '{establishment}'")
            print(f"      Message commercial: {message}")
            
            print(f"   üí∞ Montants:")
            print(f"      HT: {ht}")
            print(f"      TVA: {tva}")
            print(f"      TTC: {ttc}")
            
            print(f"   üîñ Certification:")
            print(f"      R√©f√©rence FNE: {fne_ref}")
            print(f"      Certifi√©e: {'‚úÖ OUI' if is_certified else '‚ùå NON'}")
            print(f"      N¬∞ Certification: {cert_num}")
            print(f"      Date certification: {cert_date}")
            
            if client_info:
                (name, company, ncc, phone, email, country, currency, def_template, def_payment) = client_info
                print(f"   üë§ Client (code {client_code}):")
                print(f"      Nom: '{name}'")
                print(f"      Entreprise: '{company}'")
                print(f"      NCC: '{ncc}'")
                print(f"      T√©l√©phone: '{phone}'")
                print(f"      Email: '{email}'")
                print(f"      Pays: '{country}'")
                print(f"      Devise: '{currency}'")
            
            print(f"\nüñ•Ô∏è DONN√âES AFFICH√âES DANS L'INTERFACE")
            print("-" * 40)
            for key, value in interface_data.items():
                field_name = key.replace("interface_", "").replace("_", " ").title()
                print(f"   {field_name}: '{value}'")
            
            print(f"\nüîç COMPARAISON ET ANALYSE")
            print("-" * 28)
            
            # Comparaison client
            interface_client = interface_data["interface_client"]
            if client_info:
                expected_client = f"{name} ({client_code})"
                if interface_client == expected_client:
                    print(f"   ‚úÖ Client coh√©rent: '{interface_client}'")
                else:
                    print(f"   ‚ö†Ô∏è Client diff√©rent:")
                    print(f"      Interface: '{interface_client}'")
                    print(f"      Attendu: '{expected_client}'")
                    
                    # Analyser la source de la diff√©rence
                    if message and any(word in interface_client for word in message.split()):
                        print(f"      üîç Source probable: CommercialMessage = '{message}'")
                    else:
                        print(f"      üîç Source: Logique ViewModel inconnue")
            
            # Comparaison template
            template_mapping = {
                "B2C": "Business to Consumer",
                "B2B": "Business to Business",
                "B2G": "Business to Government"
            }
            
            expected_template = template_mapping.get(template, template)
            interface_template = interface_data["interface_template"]
            
            if interface_template == expected_template:
                print(f"   ‚úÖ Template coh√©rent: '{template}' ‚Üí '{interface_template}'")
            else:
                print(f"   ‚ùå Template incoh√©rent:")
                print(f"      Base: '{template}' ‚Üí Attendu: '{expected_template}'")
                print(f"      Interface: '{interface_template}'")
            
            # Comparaison paiement
            payment_mapping = {
                "cash": "Esp√®ces",
                "mobile-money": "Mobile Money",
                "card": "Carte",
                "check": "Ch√®que",
                "transfer": "Virement",
                "credit": "Cr√©dit",
                "other": "Autre"
            }
            
            expected_payment = payment_mapping.get(payment, payment)
            interface_payment = interface_data["interface_paiement"]
            
            if interface_payment == expected_payment:
                print(f"   ‚úÖ Paiement coh√©rent: '{payment}' ‚Üí '{interface_payment}'")
            else:
                print(f"   ‚ö†Ô∏è Paiement diff√©rent:")
                print(f"      Base: '{payment}' ‚Üí Attendu: '{expected_payment}'")
                print(f"      Interface: '{interface_payment}'")
            
            # Comparaison montants (conversion format)
            def format_amount(amount):
                """Formate un montant comme dans l'interface"""
                if amount is None:
                    return "0.00"
                return f"{amount:,.2f}".replace(",", " ")
            
            expected_ht = f"{format_amount(ht)} FCFA"
            expected_tva = f"{format_amount(tva)} FCFA"
            expected_ttc = f"{format_amount(ttc)} FCFA"
            
            interface_ht = interface_data["interface_montant_ht"]
            interface_tva = interface_data["interface_montant_tva"]
            interface_ttc = interface_data["interface_montant_ttc"]
            
            print(f"   üí∞ Montants:")
            
            if interface_ht == expected_ht:
                print(f"      ‚úÖ HT coh√©rent: {expected_ht}")
            else:
                print(f"      ‚ö†Ô∏è HT diff√©rent: Interface='{interface_ht}' vs Attendu='{expected_ht}'")
            
            if interface_tva == expected_tva:
                print(f"      ‚úÖ TVA coh√©rente: {expected_tva}")
            else:
                print(f"      ‚ö†Ô∏è TVA diff√©rente: Interface='{interface_tva}' vs Attendu='{expected_tva}'")
            
            if interface_ttc == expected_ttc:
                print(f"      ‚úÖ TTC coh√©rent: {expected_ttc}")
            else:
                print(f"      ‚ö†Ô∏è TTC diff√©rent: Interface='{interface_ttc}' vs Attendu='{expected_ttc}'")
            
            # V√©rification point de vente
            interface_pos = interface_data["interface_point_vente"]
            if interface_pos == pos:
                print(f"   ‚úÖ Point de vente coh√©rent: '{pos}'")
            else:
                print(f"   ‚ö†Ô∏è Point de vente diff√©rent:")
                print(f"      Interface: '{interface_pos}'")
                print(f"      Base: '{pos}'")
            
            # Analyse articles de la facture
            print(f"\nüì¶ ANALYSE DES ARTICLES")
            print("-" * 22)
            
            cursor.execute("""
                SELECT ArticleCode, Designation, Quantity, UnitPrice, 
                       VatRate, TotalPriceHT, VatAmount
                FROM FneInvoiceItems 
                WHERE InvoiceId IN (
                    SELECT Id FROM FneInvoices WHERE InvoiceNumber = ?
                )
                ORDER BY ArticleCode
            """, (facture_num,))
            
            articles = cursor.fetchall()
            
            if articles:
                print(f"   üìã {len(articles)} article(s) trouv√©(s):")
                for i, (code, desig, qty, price, vat_rate, total_ht, vat_amt) in enumerate(articles, 1):
                    print(f"      {i}. {code} - {desig}")
                    print(f"         Qt√©: {qty}, Prix: {price} FCFA")
                    print(f"         TVA: {vat_rate}%, Total HT: {total_ht} FCFA")
            else:
                print(f"   ‚ö†Ô∏è Aucun article trouv√© (possiblement dans une autre table)")
            
            print(f"\n" + "="*50)
        
        # R√©sum√© global
        print(f"\nüéØ R√âSUM√â GLOBAL")
        print("=" * 15)
        print(f"‚úÖ POINTS POSITIFS IDENTIFI√âS:")
        print(f"   ‚Ä¢ Templates correctement mapp√©s (B2C ‚Üí Business to Consumer)")
        print(f"   ‚Ä¢ Paiements correctement mapp√©s (cash ‚Üí Esp√®ces)")
        print(f"   ‚Ä¢ Montants correctement format√©s")
        print(f"   ‚Ä¢ Structure de donn√©es coh√©rente")
        
        print(f"\n‚ö†Ô∏è POINTS D'ATTENTION:")
        print(f"   ‚Ä¢ Noms clients : Utilisation de CommercialMessage vs nom r√©el")
        print(f"   ‚Ä¢ V√©rifier la logique du ViewModel pour l'affichage des noms")
        print(f"   ‚Ä¢ S'assurer que les transformations de donn√©es sont coh√©rentes")
        
        print(f"\nüîß RECOMMANDATIONS:")
        print(f"   ‚Ä¢ Standardiser l'affichage des noms clients")
        print(f"   ‚Ä¢ V√©rifier le mapping des templates et paiements")
        print(f"   ‚Ä¢ Documenter les transformations de donn√©es dans les ViewModels")
    
    except sqlite3.Error as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")
    
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    compare_invoice_data_vs_display()
    print(f"\n‚úÖ Comparaison termin√©e")