#!/usr/bin/env python3
"""
Script pour appliquer la migration des colonnes FNE enrichies
Applique les nouvelles colonnes pour exploiter au maximum les donn√©es de l'API FNE
"""
import sqlite3
import os
from datetime import datetime

# Configuration de la base de donn√©es
DB_PATH = r"data\FNEV4.db"
ABSOLUTE_DB_PATH = os.path.join(os.getcwd(), DB_PATH)

def apply_enriched_fne_columns():
    """Applique les colonnes FNE enrichies pour exploiter les donn√©es API"""
    
    print("üîß Application de la migration des colonnes FNE enrichies...")
    print(f"üìÇ Base de donn√©es: {ABSOLUTE_DB_PATH}")
    
    if not os.path.exists(ABSOLUTE_DB_PATH):
        print(f"‚ùå Erreur: Base de donn√©es non trouv√©e √† {ABSOLUTE_DB_PATH}")
        return False
    
    try:
        with sqlite3.connect(ABSOLUTE_DB_PATH) as conn:
            cursor = conn.cursor()
            
            # V√©rifier si les nouvelles colonnes existent d√©j√†
            cursor.execute("PRAGMA table_info(FneInvoices)")
            columns = [row[1] for row in cursor.fetchall()]
            
            new_columns = {
                'FneQrCodeData': 'TEXT',
                'FneBalanceSticker': 'TEXT',
                'FneCertificationTimestamp': 'TEXT',
                'FneProcessingStatus': 'TEXT',
                'FneCertificationHash': 'TEXT'
            }
            
            # Ajouter les colonnes manquantes
            added_columns = []
            for column_name, column_type in new_columns.items():
                if column_name not in columns:
                    try:
                        cursor.execute(f"ALTER TABLE FneInvoices ADD COLUMN {column_name} {column_type}")
                        added_columns.append(column_name)
                        print(f"‚úÖ Colonne ajout√©e: {column_name}")
                    except sqlite3.Error as e:
                        print(f"‚ö†Ô∏è Erreur lors de l'ajout de {column_name}: {e}")
                else:
                    print(f"‚úÖ Colonne {column_name} d√©j√† pr√©sente")
            
            conn.commit()
            
            # V√©rification finale
            cursor.execute("PRAGMA table_info(FneInvoices)")
            final_columns = [row[1] for row in cursor.fetchall()]
            
            fne_columns = [col for col in final_columns if col.startswith('Fne')]
            print(f"\nüìä Colonnes FNE disponibles ({len(fne_columns)}):")
            for col in sorted(fne_columns):
                print(f"   ‚Ä¢ {col}")
            
            if added_columns:
                print(f"\n‚úÖ Migration termin√©e ! {len(added_columns)} nouvelles colonnes ajout√©es:")
                for col in added_columns:
                    print(f"   + {col}")
            else:
                print(f"\n‚úÖ Toutes les colonnes FNE enrichies sont d√©j√† pr√©sentes!")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'application de la migration: {e}")
        return False

def verify_enriched_columns():
    """V√©rifie que toutes les colonnes enrichies sont bien pr√©sentes"""
    
    expected_columns = [
        'FneCertificationNumber',
        'FneCertificationDate', 
        'FneQrCode',
        'FneReference',
        'FneProcessedAt',
        'FneValidationUrl',
        'FneStickerBalance',
        'FneInvoiceId',
        'FneDownloadUrl',
        'FneCertifiedInvoiceDetails',
        'FneHasWarning',
        'FneWarningMessage',
        'FneCompanyNcc',
        'FnePublicVerificationToken',
        # Nouvelles colonnes enrichies
        'FneQrCodeData',
        'FneBalanceSticker', 
        'FneCertificationTimestamp',
        'FneProcessingStatus',
        'FneCertificationHash'
    ]
    
    try:
        with sqlite3.connect(ABSOLUTE_DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(FneInvoices)")
            actual_columns = [row[1] for row in cursor.fetchall()]
            
            missing_columns = [col for col in expected_columns if col not in actual_columns]
            present_columns = [col for col in expected_columns if col in actual_columns]
            
            print(f"\nüîç V√©rification des colonnes FNE enrichies:")
            print(f"‚úÖ Colonnes pr√©sentes: {len(present_columns)}/{len(expected_columns)}")
            
            if missing_columns:
                print(f"‚ùå Colonnes manquantes ({len(missing_columns)}):")
                for col in missing_columns:
                    print(f"   - {col}")
                return False
            else:
                print("üéâ Toutes les colonnes FNE enrichies sont pr√©sentes !")
                return True
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Migration des colonnes FNE enrichies")
    print("=" * 50)
    
    success = apply_enriched_fne_columns()
    
    if success:
        print("\n" + "=" * 50)
        verify_enriched_columns()
        print("\nüéØ Les colonnes FNE sont pr√™tes pour exploiter toutes les donn√©es de l'API DGI !")
        print("   ‚Ä¢ QR Code data pour affichage visuel")
        print("   ‚Ä¢ Balance sticker pour validation officielle")  
        print("   ‚Ä¢ Timestamp de certification DGI")
        print("   ‚Ä¢ Statut de traitement en temps r√©el")
        print("   ‚Ä¢ Hash de certification pour int√©grit√©")
    else:
        print("\n‚ùå √âchec de la migration")
        exit(1)