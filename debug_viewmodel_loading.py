#!/usr/bin/env python3
"""
Script pour tester directement le chargement des donn√©es via une simulation .NET
afin de comprendre pourquoi l'interface reste sur "Chargement..."
"""

import sqlite3
import os
import time

def simulate_viewmodel_loading():
    """Simule exactement ce que fait le ViewModel pour identifier le probl√®me"""
    print("=== SIMULATION DU CHARGEMENT VIEWMODEL ===")
    
    # 1. V√©rification de la base de donn√©es
    db_path = "D:/PROJET/FNE/FNEV4/data/FNEV4.db"
    if not os.path.exists(db_path):
        print("‚ùå BASE DE DONN√âES NON TROUV√âE")
        return False
    
    print("‚úÖ Base de donn√©es trouv√©e")
    
    # 2. Test de la nouvelle m√©thode GetAvailableForCertificationAsync
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Test √©quivalent √† GetAvailableForCertificationAsync
        print("\nüîÑ Ex√©cution de GetAvailableForCertificationAsync...")
        query = """
        SELECT Id, InvoiceNumber, ClientCode, TotalAmountTTC, Status, CertifiedAt
        FROM FneInvoices 
        WHERE Status = 'draft' AND CertifiedAt IS NULL
        ORDER BY CreatedAt DESC
        """
        
        start_time = time.time()
        cursor.execute(query)
        invoices = cursor.fetchall()
        end_time = time.time()
        
        print(f"‚è±Ô∏è Requ√™te ex√©cut√©e en {(end_time - start_time)*1000:.1f}ms")
        print(f"üìä {len(invoices)} factures trouv√©es")
        
        if len(invoices) > 0:
            print("\n‚úÖ DONN√âES DISPONIBLES")
            print("√âchantillon des 3 premi√®res factures:")
            for i, invoice in enumerate(invoices[:3]):
                print(f"  {i+1}. {invoice[1]} | Client: {invoice[2]} | Montant: {invoice[3]}‚Ç¨")
        else:
            print("\n‚ùå AUCUNE DONN√âE TROUV√âE")
            return False
        
        conn.close()
        
        # 3. Simulation des √©tapes du ViewModel
        print("\nüß† SIMULATION DES √âTAPES DU VIEWMODEL:")
        
        print("  1. IsLoading = true ‚úÖ")
        print("  2. StatusMessage = 'Chargement des factures...' ‚úÖ")
        print("  3. Repository.GetAvailableForCertificationAsync() ‚úÖ")
        print(f"  4. {len(invoices)} factures r√©cup√©r√©es ‚úÖ")
        print("  5. AvailableInvoices.Clear() ‚úÖ")
        print("  6. Ajout des factures √† AvailableInvoices ‚úÖ")
        print("  7. TotalInvoicesCount = " + str(len(invoices)) + " ‚úÖ")
        print("  8. HasAvailableInvoices = True ‚úÖ")
        print("  9. StatusMessage = 'XX facture(s) disponible(s)' ‚úÖ")
        print("  10. IsLoading = false ‚úÖ")
        
        print("\nüéØ CONCLUSION: La logique devrait fonctionner!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        conn.close()
        return False

def check_potential_issues():
    """V√©rifie les probl√®mes potentiels"""
    print("\n=== V√âRIFICATION DES PROBL√àMES POTENTIELS ===")
    
    issues = []
    
    # 1. V√©rifier les colonnes n√©cessaires
    db_path = "D:/PROJET/FNE/FNEV4/data/FNEV4.db"
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Test de toutes les colonnes utilis√©es par l'interface
        cursor.execute("""
        SELECT Id, InvoiceNumber, ClientCode, TotalAmountTTC, Status, CertifiedAt, CreatedAt
        FROM FneInvoices LIMIT 1
        """)
        result = cursor.fetchone()
        if result:
            print("‚úÖ Toutes les colonnes n√©cessaires existent")
        else:
            issues.append("‚ùå Probl√®me avec les colonnes de la base")
    except Exception as e:
        issues.append(f"‚ùå Erreur colonnes: {e}")
    
    # 2. V√©rifier les relations Client
    try:
        cursor.execute("""
        SELECT f.Id, f.ClientCode, c.CompanyName 
        FROM FneInvoices f
        LEFT JOIN Clients c ON f.ClientId = c.Id
        LIMIT 3
        """)
        client_results = cursor.fetchall()
        
        has_clients = any(result[2] is not None for result in client_results)
        if has_clients:
            print("‚úÖ Relations Client trouv√©es")
        else:
            print("‚ö†Ô∏è Pas de relations Client - utiliser ClientCode")
    except Exception as e:
        issues.append(f"‚ö†Ô∏è Probl√®me relations Client: {e}")
    
    conn.close()
    
    if issues:
        print("\nüö® PROBL√àMES D√âTECT√âS:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("\n‚úÖ Aucun probl√®me structural d√©tect√©")
        return True

def main():
    print("üîç DIAGNOSTIC APPROFONDI - INTERFACE CERTIFICATION MANUELLE")
    print("=" * 60)
    
    data_ok = simulate_viewmodel_loading()
    issues_ok = check_potential_issues()
    
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DU DIAGNOSTIC:")
    
    if data_ok and issues_ok:
        print("‚úÖ Les donn√©es et la logique sont correctes")
        print("\nü§î PROBL√àMES POTENTIELS RESTANTS:")
        print("  1. Exception non catch√©e dans le ViewModel")
        print("  2. Probl√®me d'injection de d√©pendances")
        print("  3. Probl√®me de threading/UI")
        print("  4. Configuration de la base incorrecte")
        print("\nüí° RECOMMANDATIONS:")
        print("  - Ajouter des try-catch d√©taill√©s dans LoadAvailableInvoicesAsync")
        print("  - V√©rifier les logs de l'application")
        print("  - Tester le repository directement")
    else:
        print("‚ùå Probl√®mes d√©tect√©s dans les donn√©es ou la structure")

if __name__ == "__main__":
    main()