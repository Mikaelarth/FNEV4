#!/usr/bin/env python3
"""
Test de performance pour DataGrid FNEV4 - Optimisations appliqu√©es
V√©rifie les am√©liorations apport√©es pour r√©soudre la lenteur
"""

import os
import sqlite3
import time
from datetime import datetime

def check_database_performance():
    """Teste les performances de la base de donn√©es SQLite avec les nouveaux param√®tres"""
    print("üîç Test de performance de la base de donn√©es...")
    
    db_path = r"C:\wamp64\www\FNEV4\data\FNEV4.db"
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es introuvable: {db_path}")
        return
    
    try:
        # Connexion avec les nouveaux param√®tres optimis√©s
        conn_string = f"file:{db_path}?cache=shared&mode=ro"
        conn = sqlite3.connect(conn_string, uri=True)
        conn.execute("PRAGMA cache_size = 10000")
        conn.execute("PRAGMA temp_store = MEMORY")
        conn.execute("PRAGMA journal_mode = WAL")
        conn.execute("PRAGMA synchronous = NORMAL")
        
        cursor = conn.cursor()
        
        # Test 1: Comptage total des clients
        start_time = time.time()
        cursor.execute("SELECT COUNT(*) FROM Clients")
        total_clients = cursor.fetchone()[0]
        count_time = time.time() - start_time
        
        print(f"üìä Nombre total de clients: {total_clients}")
        print(f"‚è±Ô∏è Temps de comptage: {count_time:.3f}s")
        
        # Test 2: Pagination simul√©e (25 premiers clients)
        start_time = time.time()
        cursor.execute("""
            SELECT Id, Name, ClientCode, ClientType, IsActive 
            FROM Clients 
            ORDER BY Name, ClientCode 
            LIMIT 25
        """)
        page_results = cursor.fetchall()
        pagination_time = time.time() - start_time
        
        print(f"üìÑ Premi√®re page (25 clients) charg√©e en: {pagination_time:.3f}s")
        
        # Test 3: Recherche avec LIKE
        start_time = time.time()
        cursor.execute("""
            SELECT COUNT(*) FROM Clients 
            WHERE Name LIKE '%test%' OR ClientCode LIKE '%test%'
        """)
        search_results = cursor.fetchone()[0]
        search_time = time.time() - start_time
        
        print(f"üîç Recherche 'test': {search_results} r√©sultats en {search_time:.3f}s")
        
        # Test 4: V√©rification des index
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='Clients'")
        indexes = cursor.fetchall()
        print(f"üìá Index sur la table Clients: {len(indexes)}")
        for idx in indexes:
            print(f"   - {idx[0]}")
        
        conn.close()
        
        # √âvaluation de la performance
        print("\nüìà √âVALUATION DES PERFORMANCES:")
        if count_time < 0.1:
            print("‚úÖ Comptage: Excellent (< 0.1s)")
        elif count_time < 0.5:
            print("üü° Comptage: Bon (< 0.5s)")
        else:
            print("‚ö†Ô∏è Comptage: Lent (> 0.5s)")
            
        if pagination_time < 0.05:
            print("‚úÖ Pagination: Excellent (< 0.05s)")
        elif pagination_time < 0.2:
            print("üü° Pagination: Bon (< 0.2s)")
        else:
            print("‚ö†Ô∏è Pagination: Lent (> 0.2s)")
            
        if search_time < 0.1:
            print("‚úÖ Recherche: Excellent (< 0.1s)")
        elif search_time < 0.5:
            print("üü° Recherche: Bon (< 0.5s)")
        else:
            print("‚ö†Ô∏è Recherche: Lent (> 0.5s)")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de performance: {e}")

def check_xaml_optimizations():
    """V√©rifie les optimisations appliqu√©es au XAML"""
    print("\nüîç V√©rification des optimisations XAML...")
    
    xaml_path = r"C:\wamp64\www\FNEV4\src\FNEV4.Presentation\Views\GestionClients\ListeClientsView.xaml"
    if not os.path.exists(xaml_path):
        print(f"‚ùå Fichier XAML introuvable: {xaml_path}")
        return
    
    try:
        with open(xaml_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        optimizations = {
            'EnableRowVirtualization="True"': '‚úÖ Virtualisation des lignes activ√©e',
            'EnableColumnVirtualization="True"': '‚úÖ Virtualisation des colonnes activ√©e',
            'VirtualizingPanel.IsVirtualizing="True"': '‚úÖ Panel de virtualisation activ√©',
            'VirtualizationMode="Recycling"': '‚úÖ Mode recyclage activ√©',
            'ScrollUnit="Pixel"': '‚úÖ D√©filement par pixel',
            'CacheLength="1,2"': '‚úÖ Cache de virtualisation configur√©',
            'IsDeferredScrollingEnabled="False"': '‚úÖ D√©filement imm√©diat',
            'UseLayoutRounding="True"': '‚úÖ Arrondi des layouts',
            'SnapsToDevicePixels="True"': '‚úÖ Accrochage aux pixels'
        }
        
        print("üìã Optimisations DataGrid d√©tect√©es:")
        for opt, desc in optimizations.items():
            if opt in content:
                print(f"   {desc}")
            else:
                print(f"   ‚ùå {desc.replace('‚úÖ', '').strip()} - MANQUANT")
        
        # V√©rification des erreurs corrig√©es
        if 'MaterialDesignChip' in content:
            print("‚ö†Ô∏è ATTENTION: MaterialDesignChip encore pr√©sent (risque de crash)")
        else:
            print("‚úÖ MaterialDesignChip supprim√© (crash corrig√©)")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification XAML: {e}")

def check_viewmodel_optimizations():
    """V√©rifie les optimisations du ViewModel"""
    print("\nüîç V√©rification des optimisations ViewModel...")
    
    vm_path = r"C:\wamp64\www\FNEV4\src\FNEV4.Presentation\ViewModels\GestionClients\ListeClientsViewModel.cs"
    if not os.path.exists(vm_path):
        print(f"‚ùå Fichier ViewModel introuvable: {vm_path}")
        return
    
    try:
        with open(vm_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = {
            'if (IsLoading) return;': '‚úÖ Protection contre les rechargements multiples',
            'ExecuteAsync(null)': '‚úÖ Ex√©cution asynchrone des commandes',
            'ObservableCollection<int> PageSizes': '‚úÖ Collection des tailles de page',
            'PageSize': '‚úÖ Propri√©t√© PageSize (binding corrig√©)'
        }
        
        print("üìã Optimisations ViewModel d√©tect√©es:")
        for check, desc in checks.items():
            if check in content:
                print(f"   {desc}")
            else:
                print(f"   ‚ùå {desc.replace('‚úÖ', '').strip()} - MANQUANT")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification ViewModel: {e}")

def main():
    """Fonction principale de test des performances"""
    print("=" * 60)
    print("üöÄ TEST DE PERFORMANCE DATAGRID FNEV4")
    print("=" * 60)
    print(f"üìÖ Ex√©cut√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Tests de performance
    check_database_performance()
    check_xaml_optimizations()
    check_viewmodel_optimizations()
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES OPTIMISATIONS APPLIQU√âES:")
    print("=" * 60)
    print("1. ‚úÖ SQLite optimis√© (WAL, Cache, Synchronisation)")
    print("2. ‚úÖ DataGrid virtualis√© (lignes + colonnes)")
    print("3. ‚úÖ Entity Framework NoTracking pour lecture seule")
    print("4. ‚úÖ Requ√™tes optimis√©es avec EF.Functions.Like")
    print("5. ‚úÖ Protection contre les rechargements multiples")
    print("6. ‚úÖ Correction des bindings (PageSize/PageSizes)")
    print("7. ‚úÖ MaterialDesignChip remplac√© (crash corrig√©)")
    print()
    print("üéØ PERFORMANCE ATTENDUE:")
    print("   - Chargement initial: < 1s")
    print("   - Pagination: < 0.2s") 
    print("   - Recherche: < 0.5s")
    print("   - Filtrage: < 0.3s")

if __name__ == "__main__":
    main()
