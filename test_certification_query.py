#!/usr/bin/env python3
"""
Script de test pour v√©rifier que notre nouvelle m√©thode GetAvailableForCertificationAsync
fonctionne correctement avec la vraie structure de la base de donn√©es.
"""

import sqlite3
import os

def test_new_query_logic():
    """Teste la logique de la nouvelle m√©thode GetAvailableForCertificationAsync"""
    db_path = "D:/PROJET/FNE/FNEV4/data/FNEV4.db"
    if not os.path.exists(db_path):
        print("Base de donn√©es non trouv√©e")
        return False
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Test de la requ√™te √©quivalente √† GetAvailableForCertificationAsync
        # WHERE f.Status == "draft" && f.CertifiedAt == null
        query = """
        SELECT 
            COUNT(*) as count,
            InvoiceNumber,
            ClientCode,
            TotalAmountTTC,
            Status,
            CertifiedAt
        FROM FneInvoices 
        WHERE Status = 'draft' AND CertifiedAt IS NULL
        GROUP BY Status
        """
        
        cursor.execute(query)
        result = cursor.fetchone()
        
        if result:
            count = result[0]
            print(f"‚úì Requ√™te GetAvailableForCertificationAsync: {count} factures trouv√©es")
            print(f"  Statut: {result[4] or 'NULL'}")
            print(f"  CertifiedAt: {result[5] or 'NULL'}")
            
            if count > 0:
                # Obtenir quelques exemples
                cursor.execute("""
                SELECT InvoiceNumber, ClientCode, TotalAmountTTC, CreatedAt
                FROM FneInvoices 
                WHERE Status = 'draft' AND CertifiedAt IS NULL
                ORDER BY CreatedAt DESC
                LIMIT 5
                """)
                
                samples = cursor.fetchall()
                print(f"  √âchantillon de {len(samples)} factures:")
                for sample in samples:
                    print(f"    - {sample[0]} | Code client: {sample[1]} | Montant: {sample[2]}‚Ç¨")
                
                conn.close()
                return True
            else:
                print("  ‚ö† Aucune facture disponible selon les crit√®res")
                conn.close()
                return False
        else:
            print("‚úó Aucun r√©sultat de la requ√™te")
            conn.close()
            return False
            
    except Exception as e:
        print(f"‚úó Erreur lors du test: {e}")
        conn.close()
        return False

def check_current_data_state():
    """V√©rifie l'√©tat actuel des donn√©es pour comprendre pourquoi elles ne s'affichent pas"""
    db_path = "D:/PROJET/FNE/FNEV4/data/FNEV4.db"
    if not os.path.exists(db_path):
        print("Base de donn√©es non trouv√©e")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier les diff√©rentes conditions de certification
        print("ANALYSE DE L'√âTAT DES DONN√âES:")
        
        # Total des factures
        cursor.execute("SELECT COUNT(*) FROM FneInvoices")
        total = cursor.fetchone()[0]
        print(f"Total factures: {total}")
        
        # Par statut
        cursor.execute("SELECT Status, COUNT(*) FROM FneInvoices GROUP BY Status")
        statuses = cursor.fetchall()
        for status, count in statuses:
            print(f"  {status}: {count} factures")
        
        # Par CertifiedAt
        cursor.execute("SELECT COUNT(*) FROM FneInvoices WHERE CertifiedAt IS NULL")
        not_certified = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM FneInvoices WHERE CertifiedAt IS NOT NULL")
        certified = cursor.fetchone()[0]
        print(f"Non certifi√©es (CertifiedAt IS NULL): {not_certified}")
        print(f"Certifi√©es (CertifiedAt IS NOT NULL): {certified}")
        
        # Combinaison draft + non certifi√©es
        cursor.execute("SELECT COUNT(*) FROM FneInvoices WHERE Status = 'draft' AND CertifiedAt IS NULL")
        available_for_cert = cursor.fetchone()[0]
        print(f"Disponibles pour certification (draft + CertifiedAt NULL): {available_for_cert}")
        
        conn.close()
        
    except Exception as e:
        print(f"Erreur: {e}")
        conn.close()

if __name__ == "__main__":
    print("=== TEST DE LA NOUVELLE LOGIQUE DE CERTIFICATION ===")
    
    print("\n1. √âTAT ACTUEL DES DONN√âES:")
    check_current_data_state()
    
    print("\n2. TEST DE LA NOUVELLE REQU√äTE:")
    success = test_new_query_logic()
    
    if success:
        print("\n‚úì La logique semble correcte. Les corrections devraient fonctionner.")
        print("üìù Fermez l'application FNEV4 et recompilez pour tester les changements.")
    else:
        print("\n‚ö† Il pourrait y avoir un probl√®me avec les donn√©es ou la logique.")
        print("üîç V√©rifiez les crit√®res de filtrage dans le repository.")