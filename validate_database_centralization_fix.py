#!/usr/bin/env python3
"""
Script de validation pour v√©rifier que le probl√®me de centralisation
de la base de donn√©es a √©t√© corrig√© dans EntrepriseConfigViewModel
"""

import os
import json
from datetime import datetime

def validate_centralization_fix():
    """
    Valide que EntrepriseConfigViewModel utilise maintenant le syst√®me centralis√©
    """
    print("üîç Validation de la correction de centralisation de la base de donn√©es")
    print("=" * 80)
    
    results = {
        "validation_date": datetime.now().isoformat(),
        "status": "UNKNOWN",
        "corrections_applied": [],
        "remaining_issues": [],
        "recommendations": []
    }
    
    # Chemin vers le ViewModel
    enterprise_vm_path = "src/FNEV4.Presentation/ViewModels/Configuration/EntrepriseConfigViewModel.cs"
    app_path = "src/FNEV4.Presentation/App.xaml.cs"
    
    # V√©rifications du ViewModel
    print("\nüìÅ V√©rification d'EntrepriseConfigViewModel.cs...")
    if os.path.exists(enterprise_vm_path):
        with open(enterprise_vm_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 1. V√©rifier l'injection du contexte
        if "private readonly FNEV4DbContext _context;" in content:
            print("‚úÖ Champ _context correctement d√©clar√©")
            results["corrections_applied"].append("Champ _context d√©clar√©")
        else:
            print("‚ùå Champ _context manquant")
            results["remaining_issues"].append("Champ _context non d√©clar√©")
        
        # 2. V√©rifier le constructeur
        if "FNEV4DbContext? context = null" in content:
            print("‚úÖ Constructeur accepte le param√®tre FNEV4DbContext")
            results["corrections_applied"].append("Constructeur modifi√© pour injection")
        else:
            print("‚ùå Constructeur ne supporte pas l'injection du contexte")
            results["remaining_issues"].append("Constructeur non modifi√©")
        
        # 3. V√©rifier l'utilisation dans LoadExistingConfigurationAsync
        if "await _context.Database.EnsureCreatedAsync();" in content:
            print("‚úÖ LoadExistingConfigurationAsync utilise _context inject√©")
            results["corrections_applied"].append("LoadExistingConfigurationAsync corrig√©")
        else:
            print("‚ùå LoadExistingConfigurationAsync n'utilise pas _context")
            results["remaining_issues"].append("LoadExistingConfigurationAsync non corrig√©")
        
        # 4. V√©rifier l'utilisation dans SaveConfigurationAsync
        save_method_uses_injected = (
            "await _context.Database.EnsureCreatedAsync();" in content and
            "_context.Companies.Update" in content and
            "_context.Companies.Add" in content and
            "await _context.SaveChangesAsync();" in content
        )
        
        if save_method_uses_injected:
            print("‚úÖ SaveConfigurationAsync utilise _context inject√©")
            results["corrections_applied"].append("SaveConfigurationAsync corrig√©")
        else:
            print("‚ùå SaveConfigurationAsync n'utilise pas _context correctement")
            results["remaining_issues"].append("SaveConfigurationAsync non corrig√©")
        
        # 5. V√©rifier l'absence d'ancien pattern
        if "new DbContextOptionsBuilder<FNEV4DbContext>" not in content:
            print("‚úÖ Ancien pattern DbContextOptionsBuilder supprim√©")
            results["corrections_applied"].append("Ancien pattern supprim√©")
        else:
            print("‚ö†Ô∏è Ancien pattern DbContextOptionsBuilder encore pr√©sent")
            results["remaining_issues"].append("Ancien pattern encore pr√©sent")
    
    else:
        print("‚ùå Fichier EntrepriseConfigViewModel.cs introuvable")
        results["remaining_issues"].append("Fichier ViewModel introuvable")
    
    # V√©rifications d'App.xaml.cs
    print("\nüìÅ V√©rification d'App.xaml.cs...")
    if os.path.exists(app_path):
        with open(app_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier l'injection dans le DI
        if "provider.GetRequiredService<FNEV4DbContext>()" in content:
            print("‚úÖ FNEV4DbContext inject√© dans la configuration DI")
            results["corrections_applied"].append("DI configuration mise √† jour")
        else:
            print("‚ùå FNEV4DbContext non inject√© dans la configuration DI")
            results["remaining_issues"].append("DI configuration non mise √† jour")
    else:
        print("‚ùå Fichier App.xaml.cs introuvable")
        results["remaining_issues"].append("Fichier App.xaml.cs introuvable")
    
    # D√©terminer le statut global
    if len(results["remaining_issues"]) == 0:
        results["status"] = "SUCCESS"
        print("\nüéâ SUCC√àS: Toutes les corrections ont √©t√© appliqu√©es!")
        results["recommendations"].append("Tester l'application pour v√©rifier le bon fonctionnement")
    elif len(results["corrections_applied"]) > 0:
        results["status"] = "PARTIAL"
        print(f"\n‚ö†Ô∏è PARTIEL: {len(results['corrections_applied'])} corrections appliqu√©es, {len(results['remaining_issues'])} probl√®mes restants")
    else:
        results["status"] = "FAILED"
        print(f"\n‚ùå √âCHEC: {len(results['remaining_issues'])} probl√®mes d√©tect√©s")
    
    # Recommandations
    if results["status"] != "SUCCESS":
        results["recommendations"].extend([
            "Terminer les corrections restantes",
            "V√©rifier la compilation du projet",
            "Tester le sous-menu Entreprise"
        ])
    
    # Sauvegarder les r√©sultats
    with open("validation_centralization_fix.json", 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ R√©sultats sauvegard√©s dans: validation_centralization_fix.json")
    
    return results

if __name__ == "__main__":
    validate_centralization_fix()
