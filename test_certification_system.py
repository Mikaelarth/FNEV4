#!/usr/bin/env python3
"""
Script de test pour v√©rifier le chargement des donn√©es 
dans l'interface de certification manuelle FNEV4
"""
import sqlite3
import os
import sys
from datetime import datetime

def test_certification_data_loading():
    """
    Test du chargement des donn√©es pour la certification manuelle
    """
    db_path = r"d:\PROJET\FNE\FNEV4\data\FNEV4.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es introuvable: {db_path}")
        return False
    
    print(f"‚úÖ Base de donn√©es trouv√©e: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Test 1: V√©rifier la structure de la table FneInvoices
        print("\nüîç Test 1: Structure de la table FneInvoices")
        cursor.execute("PRAGMA table_info(FneInvoices)")
        columns = cursor.fetchall()
        essential_columns = ['Id', 'ClientId', 'Status', 'InvoiceNumber', 'TotalAmountTTC']
        
        found_columns = [col[1] for col in columns]
        for col in essential_columns:
            if col in found_columns:
                print(f"  ‚úÖ Colonne {col} pr√©sente")
            else:
                print(f"  ‚ùå Colonne {col} manquante")
                return False
        
        # Test 2: V√©rifier les donn√©es disponibles pour certification
        print("\nüîç Test 2: Factures disponibles pour certification")
        cursor.execute("SELECT COUNT(*) FROM FneInvoices WHERE Status = 'draft'")
        draft_count = cursor.fetchone()[0]
        print(f"  Factures en statut 'draft': {draft_count}")
        
        if draft_count == 0:
            print("  ‚ùå Aucune facture en statut 'draft' pour certification")
            return False
        
        # Test 3: V√©rifier le format des donn√©es
        print("\nüîç Test 3: Format des donn√©es")
        cursor.execute("""
            SELECT Id, ClientId, Status, InvoiceNumber, TotalAmountTTC 
            FROM FneInvoices 
            WHERE Status = 'draft' 
            LIMIT 3
        """)
        samples = cursor.fetchall()
        
        for i, sample in enumerate(samples, 1):
            print(f"  Facture {i}:")
            print(f"    ID: {sample[0]} (type: {type(sample[0]).__name__})")
            print(f"    ClientId: {sample[1]} (type: {type(sample[1]).__name__})")
            print(f"    Status: {sample[2]}")
            print(f"    Num√©ro: {sample[3]}")
            print(f"    Montant: {sample[4]}")
            
            # V√©rifier que les GUIDs sont valides
            try:
                if len(str(sample[0])) == 36 and str(sample[0]).count('-') == 4:
                    print(f"    ‚úÖ ID GUID valide")
                else:
                    print(f"    ‚ùå ID GUID invalide")
                    
                if len(str(sample[1])) == 36 and str(sample[1]).count('-') == 4:
                    print(f"    ‚úÖ ClientId GUID valide")
                else:
                    print(f"    ‚ùå ClientId GUID invalide")
            except Exception as e:
                print(f"    ‚ùå Erreur validation GUID: {e}")
        
        # Test 4: V√©rifier les clients associ√©s
        print("\nüîç Test 4: Clients associ√©s aux factures")
        cursor.execute("""
            SELECT COUNT(DISTINCT ClientId) 
            FROM FneInvoices 
            WHERE Status = 'draft'
        """)
        unique_clients = cursor.fetchone()[0]
        print(f"  Clients uniques avec factures draft: {unique_clients}")
        
        cursor.execute("SELECT COUNT(*) FROM Clients")
        total_clients = cursor.fetchone()[0]
        print(f"  Total clients en base: {total_clients}")
        
        # Test 5: V√©rifier la jointure FneInvoices <-> Clients
        print("\nüîç Test 5: Jointure FneInvoices <-> Clients")
        cursor.execute("""
            SELECT f.InvoiceNumber, c.Name, c.CompanyName
            FROM FneInvoices f
            LEFT JOIN Clients c ON f.ClientId = c.Id
            WHERE f.Status = 'draft'
            LIMIT 3
        """)
        joined_data = cursor.fetchall()
        
        for invoice_num, client_name, company_name in joined_data:
            client_display = company_name or client_name or "N/A"
            print(f"  Facture {invoice_num} -> Client: {client_display}")
            if client_display == "N/A":
                print(f"    ‚ö†Ô∏è Client non trouv√© ou donn√©es manquantes")
            else:
                print(f"    ‚úÖ Jointure r√©ussie")
        
        conn.close()
        
        print(f"\n‚úÖ Tests termin√©s avec succ√®s")
        print(f"üìä R√©sum√©:")
        print(f"  - {draft_count} factures disponibles pour certification")
        print(f"  - {unique_clients} clients uniques concern√©s")
        print(f"  - Structure de donn√©es correcte")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

def test_logging_system():
    """
    Test du syst√®me de logging centralis√©
    """
    print("\nüîç Test du syst√®me de logging centralis√©")
    
    logs_dir = r"d:\PROJET\FNE\FNEV4\Data\Logs"
    if not os.path.exists(logs_dir):
        print(f"‚ùå R√©pertoire de logs non trouv√©: {logs_dir}")
        return False
    
    # Chercher le fichier de log le plus r√©cent
    log_files = [f for f in os.listdir(logs_dir) if f.endswith('.log')]
    if not log_files:
        print(f"‚ùå Aucun fichier de log trouv√© dans {logs_dir}")
        return False
    
    latest_log = max(log_files, key=lambda f: os.path.getmtime(os.path.join(logs_dir, f)))
    log_path = os.path.join(logs_dir, latest_log)
    
    print(f"  Fichier de log le plus r√©cent: {latest_log}")
    print(f"  Taille: {os.path.getsize(log_path)} octets")
    
    # V√©rifier que le fichier n'est pas vide et contient des entr√©es r√©centes
    try:
        with open(log_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        if len(lines) > 0:
            print(f"  ‚úÖ {len(lines)} entr√©es de log trouv√©es")
            print(f"  Derni√®re entr√©e: {lines[-1].strip()[:100]}...")
            return True
        else:
            print(f"  ‚ùå Fichier de log vide")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erreur lecture du log: {e}")
        return False

def main():
    """
    Fonction principale de test
    """
    print("=" * 60)
    print("FNEV4 - Test du syst√®me de certification manuelle")
    print("=" * 60)
    print(f"Date/Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test 1: Syst√®me de logging
    logging_ok = test_logging_system()
    
    # Test 2: Donn√©es de certification
    data_ok = test_certification_data_loading()
    
    print("\n" + "=" * 60)
    print("R√âSUM√â FINAL")
    print("=" * 60)
    
    if logging_ok and data_ok:
        print("‚úÖ TOUS LES TESTS R√âUSSIS")
        print("üëâ L'interface de certification manuelle devrait fonctionner correctement")
        print("üëâ Vous pouvez maintenant lancer l'application et tester l'interface")
        return True
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        if not logging_ok:
            print("   - Probl√®me avec le syst√®me de logging")
        if not data_ok:
            print("   - Probl√®me avec les donn√©es de certification")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)