// <auto-generated />
using System;
using FNEV4.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FNEV4.Infrastructure.Migrations
{
    [DbContext(typeof(FNEV4DbContext))]
    [Migration("20250918095203_AddMissingFneColumns")]
    partial class AddMissingFneColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FNEV4.Core.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientNcc")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultPaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("cash");

                    b.Property<string>("DefaultPointOfSale")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultTemplate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SellerName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientCode")
                        .IsUnique();

                    b.HasIndex("ClientNcc");

                    b.HasIndex("ClientType");

                    b.HasIndex("DefaultPaymentMethod");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("FNEV4.Core.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiBaseUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultInvoiceSettings")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultPointOfSale")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ElectronicSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSyncDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ncc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PointsOfSale")
                        .HasColumnType("TEXT");

                    b.Property<string>("RccmNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ShareCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StickerAlertThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StickerBalance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName");

                    b.HasIndex("IsActive");

                    b.HasIndex("Ncc")
                        .IsUnique();

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneApiLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FneInvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FneReference")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long>("ProcessingTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerIpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StickerBalance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FneInvoiceId");

                    b.HasIndex("IsSuccess");

                    b.HasIndex("LogLevel");

                    b.HasIndex("OperationType");

                    b.HasIndex("Timestamp");

                    b.ToTable("FneApiLogs", (string)null);
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiEndpoints")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BearerToken")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValidatedByDgi")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("LastConnectivityResult")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastConnectivityTest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastTestErrorMessages")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxRetryAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestTimeoutSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryDelaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SslCertificates")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubmittedSpecimens")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Environment");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsValidatedByDgi");

                    b.HasIndex("ConfigurationName", "Environment")
                        .IsUnique();

                    b.ToTable("FneConfigurations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            ApiVersion = "1.0",
                            BaseUrl = "http://54.247.95.108/ws",
                            ConfigurationName = "Test DGI",
                            CreatedAt = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Environment = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            IsValidatedByDgi = false,
                            MaxRetryAttempts = 3,
                            Notes = "Configuration par défaut pour l'environnement de test DGI",
                            RequestTimeoutSeconds = 30,
                            RetryDelaySeconds = 5,
                            SupportEmail = "support.fne@dgi.gouv.ci",
                            WebUrl = "http://54.247.95.108"
                        });
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CertifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommercialMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessages")
                        .HasColumnType("TEXT");

                    b.Property<string>("Establishment")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneBalanceSticker")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FneCertificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FneCertificationHash")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneCertificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FneCertificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("FneCertifiedInvoiceDetails")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneCompanyNcc")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneDigitalSignature")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneDownloadUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FneHasWarning")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FneInvoiceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneProcessingStatus")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FnePublicVerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneQrCode")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneQrCodeData")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneReference")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FneStickerBalance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FneValidationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FneWarningMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Footer")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ForeignCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ForeignCurrencyRate")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("GlobalDiscount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("ImportSessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRne")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParentInvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PointOfSale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmountHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountTTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalVatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FneReference");

                    b.HasIndex("ImportSessionId");

                    b.HasIndex("InvoiceDate");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("ParentInvoiceId");

                    b.HasIndex("Status");

                    b.ToTable("FneInvoices", (string)null);
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneInvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomTaxes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FneInvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FneItemId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ItemDiscount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("LineAmountHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LineAmountTTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LineOrder")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LineVatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeasurementUnit")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VatCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("VatTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FneInvoiceId");

                    b.HasIndex("ProductCode");

                    b.HasIndex("VatTypeId");

                    b.ToTable("FneInvoiceItems", (string)null);
                });

            modelBuilder.Entity("FNEV4.Core.Entities.ImportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessages")
                        .HasColumnType("TEXT");

                    b.Property<int>("ErrorsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoicesImported")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalInvoicesFound")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UserName");

                    b.ToTable("ImportSessions", (string)null);
                });

            modelBuilder.Entity("FNEV4.Core.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditNoteReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustomerNcc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CustomerRealName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomerTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FneCertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FneResponseMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FneStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FneTransactionNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PointOfSale")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceSheetName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmountHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountTTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalVatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountTTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.LogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExceptionDetails")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.VatType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("VatTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "TVA",
                            CreatedAt = new DateTime(2025, 9, 18, 9, 52, 1, 505, DateTimeKind.Utc).AddTicks(4778),
                            Description = "TVA normal de 18%",
                            IsActive = true,
                            IsDeleted = false,
                            Rate = 18.00m
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "TVAB",
                            CreatedAt = new DateTime(2025, 9, 18, 9, 52, 1, 505, DateTimeKind.Utc).AddTicks(4824),
                            Description = "TVA réduit de 9%",
                            IsActive = true,
                            IsDeleted = false,
                            Rate = 9.00m
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "TVAC",
                            CreatedAt = new DateTime(2025, 9, 18, 9, 52, 1, 505, DateTimeKind.Utc).AddTicks(4838),
                            Description = "TVA exec conv de 0%",
                            IsActive = true,
                            IsDeleted = false,
                            Rate = 0.00m
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Code = "TVAD",
                            CreatedAt = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "TVA exec leg de 0% pour TEE et RME",
                            IsActive = true,
                            IsDeleted = false,
                            Rate = 0.00m
                        });
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneApiLog", b =>
                {
                    b.HasOne("FNEV4.Core.Entities.FneInvoice", "FneInvoice")
                        .WithMany("ApiLogs")
                        .HasForeignKey("FneInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FneInvoice");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneInvoice", b =>
                {
                    b.HasOne("FNEV4.Core.Entities.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FNEV4.Core.Entities.ImportSession", "ImportSession")
                        .WithMany("Invoices")
                        .HasForeignKey("ImportSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FNEV4.Core.Entities.FneInvoice", "ParentInvoice")
                        .WithMany("ChildInvoices")
                        .HasForeignKey("ParentInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("ImportSession");

                    b.Navigation("ParentInvoice");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneInvoiceItem", b =>
                {
                    b.HasOne("FNEV4.Core.Entities.FneInvoice", "FneInvoice")
                        .WithMany("Items")
                        .HasForeignKey("FneInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNEV4.Core.Entities.VatType", "VatType")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("VatTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FneInvoice");

                    b.Navigation("VatType");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.InvoiceItem", b =>
                {
                    b.HasOne("FNEV4.Core.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.Client", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.FneInvoice", b =>
                {
                    b.Navigation("ApiLogs");

                    b.Navigation("ChildInvoices");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.ImportSession", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FNEV4.Core.Entities.VatType", b =>
                {
                    b.Navigation("InvoiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
