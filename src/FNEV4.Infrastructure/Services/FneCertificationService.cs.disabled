using System.Text.Json;
using Microsoft.Extensions.Logging;
using FNEV4.Core.Entities;
using FNEV4.Core.Interfaces.Services.Fne;
using FNEV4.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using System.Text;
using System.Diagnostics;

namespace FNEV4.Infrastructure.Services
{
    /// <summary>
    /// Service concret pour la certification FNE des factures
    /// Implémentation complète avec intégration API DGI et gestion des erreurs
    /// Suit l'architecture centralisée de FNEV4
    /// </summary>
    public class FneCertificationService : IFneCertificationService
    {
        #region Services injectés
        
        private readonly FNEV4DbContext _context;
        private readonly ILogger<FneCertificationService> _logger;
        private readonly HttpClient _httpClient;
        private readonly IDgiService _dgiService;
        
        #endregion

        #region Constructor

        public FneCertificationService(
            FNEV4DbContext context,
            ILogger<FneCertificationService> logger,
            HttpClient httpClient,
            IDgiService dgiService)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            _dgiService = dgiService ?? throw new ArgumentNullException(nameof(dgiService));

            _logger.LogInformation("FneCertificationService initialisé avec architecture centralisée");
        }

        #endregion

        #region Interface Implementation

        /// <summary>
        /// Certifie une facture FNE via l'API DGI
        /// </summary>
        public async Task<FneCertificationResult> CertifyInvoiceAsync(FneInvoice invoice, FneConfiguration configuration)
        {
            _logger.LogInformation("Début certification facture {InvoiceNumber}", invoice.InvoiceNumber);
            
            try
            {
                // Étape 1: Validation préliminaire
                var validationResult = await ValidateForCertificationAsync(invoice);
                if (!validationResult.IsValid)
                {
                    return new FneCertificationResult
                    {
                        IsSuccess = false,
                        ErrorMessage = "Validation échouée: " + string.Join("; ", validationResult.Errors),
                        ProcessedAt = DateTime.UtcNow
                    };
                }

                // Étape 2: Vérification NCC client
                if (!string.IsNullOrEmpty(invoice.Client?.Ncc))
                {
                    var nccValid = await _dgiService.VerifyNccAsync(invoice.Client.Ncc);
                    if (!nccValid)
                    {
                        await LogCertificationAttempt(invoice, configuration, "NCC_INVALID", false);
                        return new FneCertificationResult
                        {
                            IsSuccess = false,
                            ErrorMessage = $"NCC client invalide: {invoice.Client.Ncc}",
                            ProcessedAt = DateTime.UtcNow
                        };
                    }
                }

                // Étape 3: Conversion au format API FNE
                var jsonPayload = await ConvertToFneApiJsonAsync(invoice);
                
                // Étape 4: Appel API FNE
                invoice.Status = "InProgress";
                invoice.UpdatedAt = DateTime.UtcNow;
                await _context.SaveChangesAsync();

                var apiResponse = await CallFneApiAsync(jsonPayload, configuration);
                
                if (apiResponse.IsSuccess && !string.IsNullOrEmpty(apiResponse.FneReference))
                {
                    // Certification réussie
                    invoice.Status = "Certified";
                    invoice.FneReference = apiResponse.FneReference;
                    invoice.CertifiedAt = DateTime.UtcNow;
                    invoice.VerificationToken = apiResponse.VerificationToken;
                    invoice.VerificationUrl = apiResponse.VerificationUrl;
                    invoice.RetryCount = 0; // Reset du compteur
                    
                    await LogCertificationAttempt(invoice, configuration, "SUCCESS", true);
                    await _context.SaveChangesAsync();

                    _logger.LogInformation("Facture {InvoiceNumber} certifiée avec succès. Référence FNE: {FneReference}", 
                        invoice.InvoiceNumber, apiResponse.FneReference);

                    return new FneCertificationResult
                    {
                        IsSuccess = true,
                        FneReference = apiResponse.FneReference,
                        VerificationToken = apiResponse.VerificationToken,
                        VerificationUrl = apiResponse.VerificationUrl,
                        ProcessedAt = DateTime.UtcNow
                    };
                }
                else
                {
                    // Certification échouée
                    invoice.Status = "Error";
                    invoice.RetryCount += 1;
                    invoice.LastErrorMessage = apiResponse.ErrorMessage ?? "Erreur API inconnue";
                    invoice.LastErrorOccurredAt = DateTime.UtcNow;
                    
                    await LogCertificationAttempt(invoice, configuration, "API_ERROR", false);
                    await _context.SaveChangesAsync();

                    return new FneCertificationResult
                    {
                        IsSuccess = false,
                        ErrorMessage = apiResponse.ErrorMessage ?? "Erreur lors de l'appel API FNE",
                        ProcessedAt = DateTime.UtcNow
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erreur lors de la certification de la facture {InvoiceNumber}", invoice.InvoiceNumber);
                
                // Mise à jour du statut d'erreur
                invoice.Status = "Error";
                invoice.RetryCount += 1;
                invoice.LastErrorMessage = ex.Message;
                invoice.LastErrorOccurredAt = DateTime.UtcNow;
                
                await LogCertificationAttempt(invoice, configuration, "EXCEPTION", false, ex);
                await _context.SaveChangesAsync();

                return new FneCertificationResult
                {
                    IsSuccess = false,
                    ErrorMessage = $"Exception: {ex.Message}",
                    ProcessedAt = DateTime.UtcNow
                };
            }
        }

        /// <summary>
        /// Convertit une facture FNE au format JSON de l'API
        /// </summary>
        public async Task<string> ConvertToFneApiJsonAsync(FneInvoice invoice)
        {
            _logger.LogDebug("Conversion JSON pour facture {InvoiceNumber}", invoice.InvoiceNumber);

            try
            {
                // Charger les données complètes si nécessaire
                await _context.Entry(invoice)
                    .Collection(i => i.Items)
                    .LoadAsync();
                
                await _context.Entry(invoice)
                    .Reference(i => i.Client)
                    .LoadAsync();

                // Construire l'objet selon le format API FNE
                var apiObject = new
                {
                    facture = new
                    {
                        numero = invoice.InvoiceNumber,
                        date = invoice.InvoiceDate.ToString("yyyy-MM-dd"),
                        type = invoice.InvoiceType switch
                        {
                            "Invoice" => "FACTURE",
                            "CreditNote" => "AVOIR",
                            _ => "FACTURE"
                        },
                        devise = invoice.Currency ?? "TND",
                        
                        client = new
                        {
                            nom = invoice.Client?.CompanyName ?? invoice.Client?.ContactName ?? "Client",
                            adresse = invoice.Client?.Address,
                            ville = invoice.Client?.City,
                            codePostal = invoice.Client?.PostalCode,
                            ncc = invoice.Client?.Ncc,
                            telephone = invoice.Client?.Phone,
                            email = invoice.Client?.Email
                        },

                        lignes = invoice.Items.Select(item => new
                        {
                            designation = item.Description,
                            quantite = item.Quantity,
                            prixUnitaire = item.UnitPrice,
                            montantHT = item.TotalAmountExclTax,
                            tauxTva = item.VatRate,
                            montantTva = item.VatAmount,
                            montantTTC = item.TotalAmountInclTax
                        }).ToArray(),

                        totaux = new
                        {
                            montantHT = invoice.TotalAmountExclTax,
                            montantTva = invoice.TotalVatAmount,
                            montantTTC = invoice.TotalAmountInclTax,
                            timbreFiscal = invoice.FiscalStampAmount ?? 0
                        }
                    }
                };

                var jsonOptions = new JsonSerializerOptions
                {
                    WriteIndented = false,
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                };

                var jsonResult = JsonSerializer.Serialize(apiObject, jsonOptions);
                
                _logger.LogDebug("JSON généré pour facture {InvoiceNumber}: {JsonSize} caractères", 
                    invoice.InvoiceNumber, jsonResult.Length);

                return jsonResult;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erreur lors de la conversion JSON de la facture {InvoiceNumber}", invoice.InvoiceNumber);
                throw;
            }
        }

        /// <summary>
        /// Valide une facture avant certification
        /// </summary>
        public async Task<FneValidationResult> ValidateForCertificationAsync(FneInvoice invoice)
        {
            var result = new FneValidationResult { IsValid = true, Errors = new List<string>() };

            try
            {
                _logger.LogDebug("Validation certification pour facture {InvoiceNumber}", invoice.InvoiceNumber);

                // Validation des champs obligatoires de base
                if (string.IsNullOrWhiteSpace(invoice.InvoiceNumber))
                    result.Errors.Add("Numéro de facture obligatoire");

                if (invoice.InvoiceDate == default)
                    result.Errors.Add("Date de facture obligatoire");

                if (invoice.TotalAmountInclTax <= 0)
                    result.Errors.Add("Montant TTC doit être positif");

                // Validation du client
                if (invoice.Client == null)
                    result.Errors.Add("Client obligatoire");
                else
                {
                    if (string.IsNullOrWhiteSpace(invoice.Client.CompanyName) && 
                        string.IsNullOrWhiteSpace(invoice.Client.ContactName))
                        result.Errors.Add("Nom du client obligatoire");
                }

                // Validation des articles
                await _context.Entry(invoice).Collection(i => i.Items).LoadAsync();
                
                if (!invoice.Items.Any())
                    result.Errors.Add("Au moins un article requis");
                else
                {
                    foreach (var item in invoice.Items)
                    {
                        if (string.IsNullOrWhiteSpace(item.Description))
                            result.Errors.Add($"Description obligatoire pour l'article {item.Id}");
                            
                        if (item.Quantity <= 0)
                            result.Errors.Add($"Quantité doit être positive pour l'article {item.Description}");
                            
                        if (item.UnitPrice < 0)
                            result.Errors.Add($"Prix unitaire ne peut être négatif pour l'article {item.Description}");
                    }
                }

                // Validation spécifique FNE
                if (invoice.Status == "Certified")
                    result.Errors.Add("Facture déjà certifiée");

                if (invoice.Status == "InProgress")
                    result.Errors.Add("Certification déjà en cours");

                result.IsValid = !result.Errors.Any();

                _logger.LogDebug("Validation facture {InvoiceNumber}: {IsValid} ({ErrorCount} erreurs)", 
                    invoice.InvoiceNumber, result.IsValid, result.Errors.Count);

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erreur lors de la validation de la facture {InvoiceNumber}", invoice.InvoiceNumber);
                result.IsValid = false;
                result.Errors.Add($"Erreur de validation: {ex.Message}");
                return result;
            }
        }

        #endregion

        #region Méthodes privées

        /// <summary>
        /// Effectue l'appel vers l'API FNE
        /// </summary>
        private async Task<ApiResponse> CallFneApiAsync(string jsonPayload, FneConfiguration configuration)
        {
            try
            {
                var endpoint = $"{configuration.BaseUrl}/api/v{configuration.ApiVersion}/certify";
                _logger.LogDebug("Appel API FNE: {Endpoint}", endpoint);

                using var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
                
                // Headers d'authentification si Bearer token disponible
                if (!string.IsNullOrEmpty(configuration.BearerToken))
                {
                    _httpClient.DefaultRequestHeaders.Authorization = 
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", configuration.BearerToken);
                }

                _httpClient.Timeout = TimeSpan.FromSeconds(configuration.RequestTimeoutSeconds);

                var response = await _httpClient.PostAsync(endpoint, content);
                var responseContent = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    var responseData = JsonSerializer.Deserialize<JsonElement>(responseContent);
                    
                    return new ApiResponse
                    {
                        IsSuccess = true,
                        FneReference = responseData.GetProperty("fneReference").GetString(),
                        VerificationToken = responseData.TryGetProperty("verificationToken", out var token) ? token.GetString() : null,
                        VerificationUrl = responseData.TryGetProperty("verificationUrl", out var url) ? url.GetString() : null
                    };
                }
                else
                {
                    _logger.LogWarning("Échec API FNE. Status: {StatusCode}, Response: {Response}", 
                        response.StatusCode, responseContent);
                    
                    return new ApiResponse
                    {
                        IsSuccess = false,
                        ErrorMessage = $"HTTP {(int)response.StatusCode}: {responseContent}"
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception lors de l'appel API FNE");
                return new ApiResponse
                {
                    IsSuccess = false,
                    ErrorMessage = ex.Message
                };
            }
        }

        /// <summary>
        /// Enregistre une tentative de certification dans les logs API
        /// </summary>
        private async Task LogCertificationAttempt(
            FneInvoice invoice, 
            FneConfiguration configuration, 
            string operationType, 
            bool isSuccess, 
            Exception? exception = null)
        {
            try
            {
                var apiLog = new FneApiLog
                {
                    Id = Guid.NewGuid(),
                    FneInvoiceId = invoice.Id,
                    OperationType = operationType,
                    HttpMethod = "POST",
                    Endpoint = $"{configuration.BaseUrl}/api/v{configuration.ApiVersion}/certify",
                    Environment = configuration.Environment,
                    AttemptNumber = invoice.RetryCount + 1,
                    IsSuccess = isSuccess,
                    LogLevel = isSuccess ? "Info" : "Error",
                    CreatedAt = DateTime.UtcNow,
                    Timestamp = DateTime.UtcNow
                };

                if (exception != null)
                {
                    apiLog.ErrorType = exception.GetType().Name;
                    apiLog.ErrorMessage = exception.Message;
                    apiLog.ErrorStackTrace = exception.StackTrace;
                }

                _context.FneApiLogs.Add(apiLog);
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Impossible d'enregistrer le log API pour la facture {InvoiceNumber}", invoice.InvoiceNumber);
                // Ne pas faire échouer la certification pour un problème de log
            }
        }

        /// <summary>
        /// Certifie plusieurs factures en lot
        /// </summary>
        public async Task<FneBatchCertificationResult> CertifyInvoicesBatchAsync(List<FneInvoice> invoices, FneConfiguration configuration)
        {
            var result = new FneBatchCertificationResult
            {
                TotalCount = invoices.Count
            };

            var sw = Stopwatch.StartNew();

            try
            {
                foreach (var invoice in invoices)
                {
                    try
                    {
                        var certificationResult = await CertifyInvoiceAsync(invoice, configuration);
                        result.Results.Add(certificationResult);
                        
                        if (certificationResult.IsSuccess)
                            result.SuccessCount++;
                        else
                            result.ErrorCount++;
                    }
                    catch (Exception ex)
                    {
                        result.ErrorCount++;
                        result.Results.Add(new FneCertificationResult
                        {
                            IsSuccess = false,
                            ErrorMessage = ex.Message
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                result.GlobalErrors.Add($"Erreur globale: {ex.Message}");
            }
            finally
            {
                sw.Stop();
                result.TotalProcessingTimeMs = sw.ElapsedMilliseconds;
            }

            return result;
        }

        /// <summary>
        /// Obtient les factures en attente de certification
        /// </summary>
        public async Task<List<FneInvoice>> GetPendingInvoicesAsync()
        {
            return await _context.FneInvoices
                .Where(i => i.FneStatus == FneInvoiceStatus.Pending || i.FneStatus == FneInvoiceStatus.Draft)
                .OrderBy(i => i.CreatedAt)
                .ToListAsync();
        }

        /// <summary>
        /// Obtient le nombre de factures en attente
        /// </summary>
        public async Task<int> GetPendingInvoicesCountAsync()
        {
            return await _context.FneInvoices
                .CountAsync(i => i.FneStatus == FneInvoiceStatus.Pending || i.FneStatus == FneInvoiceStatus.Draft);
        }

        /// <summary>
        /// Obtient les factures pour une période donnée
        /// </summary>
        public async Task<List<FneInvoice>> GetInvoicesForPeriodAsync(DateTime startDate, DateTime endDate)
        {
            return await _context.FneInvoices
                .Where(i => i.CreatedAt >= startDate && i.CreatedAt <= endDate)
                .OrderByDescending(i => i.CreatedAt)
                .ToListAsync();
        }

        /// <summary>
        /// Certifie les factures en attente (pour mode automatique)
        /// </summary>
        public async Task<FneBatchCertificationResult> CertifyPendingInvoicesAsync(int maxCount = 50)
        {
            var pendingInvoices = await _context.FneInvoices
                .Where(i => i.FneStatus == FneInvoiceStatus.Pending)
                .OrderBy(i => i.CreatedAt)
                .Take(maxCount)
                .ToListAsync();

            // Utiliser une configuration par défaut ou la récupérer
            var configuration = await _context.FneConfigurations.FirstOrDefaultAsync();
            if (configuration == null)
            {
                return new FneBatchCertificationResult
                {
                    TotalCount = 0,
                    GlobalErrors = new List<string> { "Aucune configuration FNE trouvée" }
                };
            }

            return await CertifyInvoicesBatchAsync(pendingInvoices, configuration);
        }

        /// <summary>
        /// Obtient les activités récentes de certification
        /// </summary>
        public async Task<List<FneActivity>> GetRecentActivitiesAsync(int count = 10)
        {
            // Simuler des activités à partir des logs API
            var recentLogs = await _context.FneApiLogs
                .OrderByDescending(l => l.CreatedAt)
                .Take(count)
                .ToListAsync();

            return recentLogs.Select(log => new FneActivity
            {
                CreatedAt = log.CreatedAt,
                ActivityType = "Certification",
                Message = log.IsSuccess ? "Certification réussie" : $"Échec: {log.ErrorMessage}",
                Level = log.IsSuccess ? "Success" : "Error",
                InvoiceNumber = log.InvoiceNumber,
                ProcessingTimeMs = log.ProcessingTimeMs
            }).ToList();
        }

        /// <summary>
        /// Obtient les certifications récentes
        /// </summary>
        public async Task<List<FneInvoice>> GetRecentCertificationsAsync(int count = 5)
        {
            return await _context.FneInvoices
                .Where(i => i.FneStatus == FneInvoiceStatus.Certified)
                .OrderByDescending(i => i.CertifiedAt)
                .Take(count)
                .ToListAsync();
        }

        /// <summary>
        /// Obtient les métriques de performance
        /// </summary>
        public async Task<FnePerformanceMetrics> GetPerformanceMetricsAsync()
        {
            var today = DateTime.Today;
            var todayInvoices = await _context.FneInvoices
                .Where(i => i.CreatedAt >= today)
                .ToListAsync();

            var successCount = todayInvoices.Count(i => i.FneStatus == FneInvoiceStatus.Certified);
            var totalCount = todayInvoices.Count;
            
            var avgTime = await _context.FneApiLogs
                .Where(l => l.CreatedAt >= today && l.IsSuccess)
                .AverageAsync(l => (double?)l.ProcessingTimeMs) ?? 0;

            var lastHour = DateTime.UtcNow.AddHours(-1);
            var certificationsLastHour = await _context.FneInvoices
                .CountAsync(i => i.CertifiedAt >= lastHour);

            return new FnePerformanceMetrics
            {
                SuccessRate = totalCount > 0 ? (double)successCount / totalCount * 100 : 0,
                AverageTime = TimeSpan.FromMilliseconds(avgTime),
                CertificationsLastHour = certificationsLastHour,
                TotalCertificationsToday = successCount,
                TotalErrorsToday = todayInvoices.Count(i => i.FneStatus == FneInvoiceStatus.Error),
                TotalAmountCertifiedToday = todayInvoices.Where(i => i.FneStatus == FneInvoiceStatus.Certified)
                    .Sum(i => i.TotalAmount ?? 0)
            };
        }

        /// <summary>
        /// Effectue un test de santé du système
        /// </summary>
        public async Task<FneSystemHealthResult> PerformHealthCheckAsync()
        {
            var result = new FneSystemHealthResult();

            try
            {
                // Test de connexion à la base de données
                result.DatabaseHealthy = await _context.Database.CanConnectAsync();

                // Test de connexion API
                result.ApiConnectionHealthy = await _dgiService.TestConnectionAsync();
                result.HasApiConfig = await _dgiService.IsConfiguredAsync();

                // Test de configuration
                var hasConfig = await _context.FneConfigurations.AnyAsync();
                result.ConfigurationValid = hasConfig;

                // Évaluation globale
                result.IsHealthy = result.DatabaseHealthy && result.ApiConnectionHealthy && result.ConfigurationValid;

                if (!result.IsHealthy)
                {
                    if (!result.DatabaseHealthy) result.HealthIssues.Add("Problème de connexion à la base de données");
                    if (!result.ApiConnectionHealthy) result.HealthIssues.Add("Problème de connexion à l'API DGI");
                    if (!result.ConfigurationValid) result.HealthIssues.Add("Configuration FNE incomplète");
                }

                result.StatusMessage = result.IsHealthy ? "Système opérationnel" : $"{result.HealthIssues.Count} problème(s) détecté(s)";
            }
            catch (Exception ex)
            {
                result.IsHealthy = false;
                result.StatusMessage = $"Erreur lors du test de santé: {ex.Message}";
                result.HealthIssues.Add(ex.Message);
            }

            return result;
        }

        #endregion

        #region Classes internes

        private class ApiResponse
        {
            public bool IsSuccess { get; set; }
            public string? FneReference { get; set; }
            public string? VerificationToken { get; set; }
            public string? VerificationUrl { get; set; }
            public string? ErrorMessage { get; set; }
        }

        #endregion
    }
}