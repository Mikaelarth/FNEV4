using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using FNEV4.Presentation.Views.ImportTraitement;
using FNEV4.Presentation.ViewModels.ImportTraitement;
using FNEV4.Application.Services.ImportTraitement;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using System.Linq;
using System.Windows.Media;

namespace FNEV4.Presentation.ViewModels.ImportTraitement
{
    /// <summary>
    /// ViewModel pour le module "Import de fichiers"
    /// G√®re l'import de diff√©rents types de fichiers Excel (clients, factures, etc.)
    /// </summary>
    public partial class ImportFichiersViewModel : ObservableObject
    {
        private readonly IServiceProvider _serviceProvider;

        #region Properties

        /// <summary>
        /// Indicateur de chargement global
        /// </summary>
        [ObservableProperty]
        private bool _isLoading = false;

        /// <summary>
        /// Message de statut global
        /// </summary>
        [ObservableProperty]
        private string _statusMessage = "S√©lectionnez le type d'import √† effectuer";

        /// <summary>
        /// Liste des types d'import disponibles pour l'affichage
        /// </summary>
        public ObservableCollection<ImportTypeInfo> AvailableImportTypes { get; } = new();

        /// <summary>
        /// Liste des types d'import pour l'interface
        /// </summary>
        [ObservableProperty]
        private ObservableCollection<ImportTypeInfo> importTypes = new();

        /// <summary>
        /// Texte de recherche pour filtrer les imports
        /// </summary>
        [ObservableProperty]
        private string searchText = string.Empty;

        /// <summary>
        /// Indique si des r√©sultats sont disponibles
        /// </summary>
        public bool HasResults => ImportTypes?.Any() == true;

        #endregion

        #region UI Properties

        /// <summary>
        /// Titre de la fen√™tre
        /// </summary>
        public string WindowTitle => "Import de fichiers";

        /// <summary>
        /// Titre principal
        /// </summary>
        public string HeaderTitle => "Import & Traitement";

        /// <summary>
        /// Sous-titre
        /// </summary>
        public string HeaderSubtitle => "Import de fichiers Excel - Clients, Factures et autres donn√©es";

        #endregion

        #region Constructor

        public ImportFichiersViewModel(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            InitializeImportTypes();
            
            // Status avec description claire des types d'import
            StatusMessage = $"‚úÖ {AvailableImportTypes.Count} types d'import disponibles : Standard, Exceptionnel Sage v15";
        }

        #endregion

        #region Commands

        /// <summary>
        /// Commande pour rafra√Æchir la vue
        /// </summary>
        [RelayCommand]
        private async Task Refresh()
        {
            IsLoading = true;
            StatusMessage = "Actualisation...";
            
            try
            {
                // Simuler un rafra√Æchissement
                await Task.Delay(500);
                
                InitializeImportTypes();
                StatusMessage = "‚úÖ Interface actualis√©e";
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå Erreur actualisation : {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        /// <summary>
        /// Commande pour ouvrir un type d'import sp√©cifique
        /// </summary>
        [RelayCommand]
        private void OpenImport(object parameter)
        {
            if (parameter is ImportTypeInfo importType)
            {
                OpenImport(importType.Type);
            }
            else if (parameter is string type)
            {
                OpenImport(type);
            }
        }

        /// <summary>
        /// Ouvre un type d'import sp√©cialis√©
        /// </summary>
        private void OpenImport(string type)
        {
            try
            {
                StatusMessage = $"Ouverture de l'import {type}...";
                
                switch (type)
                {
                    case "FacturesStandard":
                        StatusMessage = "üöß Import Factures Standard - En cours de d√©veloppement";
                        MessageBox.Show(
                            "Import de Factures Standard\n\n" +
                            "Fonctionnalit√© en cours de d√©veloppement.\n" +
                            "G√©rera l'import des factures depuis des fichiers Excel au format standard professionnel :\n" +
                            "‚Ä¢ Structure classique avec en-t√™tes normalis√©s\n" +
                            "‚Ä¢ Colonnes pr√©d√©finies : N¬∞ facture, Date, Client, Montant HT, TVA, Total TTC\n" +
                            "‚Ä¢ Format conventionnel adapt√© aux syst√®mes de gestion standard\n" +
                            "‚Ä¢ Validation des donn√©es et contr√¥les de coh√©rence\n\n" +
                            "Sera disponible dans une prochaine mise √† jour.",
                            "En d√©veloppement",
                            MessageBoxButton.OK,
                            MessageBoxImage.Information);
                        break;
                        
                    case "FacturesSage100":
                        StatusMessage = "üöÄ Ouverture de l'import Sage 100 v15...";
                        OpenSage100ImportWindow();
                        break;
                        
                    default:
                        StatusMessage = $"‚ùå Type d'import de factures non reconnu : {type}";
                        MessageBox.Show(
                            $"Type d'import non reconnu : {type}\n\n" +
                            "Types support√©s :\n" +
                            "‚Ä¢ FacturesStandard : Import de factures au format standard professionnel\n" +
                            "‚Ä¢ FacturesSage100 : Import sp√©cialis√© pour Sage 100 v15",
                            "Erreur",
                            MessageBoxButton.OK,
                            MessageBoxImage.Error);
                        break;
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå Erreur ouverture import {type} : {ex.Message}";
            }
        }

        /// <summary>
        /// Commande pour afficher l'aide
        /// </summary>
        [RelayCommand]
        private void ShowHelp()
        {
            StatusMessage = "üí° Affichage de l'aide...";
            
            MessageBox.Show(
                "Aide sur l'import de fichiers :\n\n" +
                "‚Ä¢ Import Standard : Formats Excel normalis√©s avec en-t√™tes fixes\n" +
                "‚Ä¢ Import Exceptionnel Sage v15 : Structure non-standard sp√©cifique\n" +
                "‚Ä¢ Import Configuration : Param√®tres syst√®me et r√®gles m√©tier\n\n" +
                "Note : Pour l'import de clients standard, utilisez le menu\n" +
                "'Gestion Clients > Liste des clients > Importer'\n\n" +
                "Pour plus d'informations, consultez la documentation.",
                "Aide - Import de fichiers",
                MessageBoxButton.OK,
                MessageBoxImage.Information);
            
            StatusMessage = "S√©lectionnez le type d'import √† effectuer";
        }

        /// <summary>
        /// Commande pour afficher l'historique des imports
        /// </summary>
        [RelayCommand]
        private void ShowHistory()
        {
            StatusMessage = "üìä Ouverture de l'historique...";
            
            // TODO: Impl√©menter la fen√™tre d'historique
            MessageBox.Show(
                "Historique des imports :\n\n" +
                "Cette fonctionnalit√© permettra de voir :\n" +
                "‚Ä¢ Les imports r√©cents\n" +
                "‚Ä¢ Les statistiques de r√©ussite\n" +
                "‚Ä¢ Les logs d'erreurs\n\n" +
                "üöß En cours de d√©veloppement",
                "Historique - Import de fichiers",
                MessageBoxButton.OK,
                MessageBoxImage.Information);
            
            StatusMessage = "S√©lectionnez le type d'import √† effectuer";
        }

        /// <summary>
        /// Commande pour effectuer une recherche
        /// </summary>
        [RelayCommand]
        private void Search()
        {
            StatusMessage = "üîç Recherche en cours...";
            
            // Filtrer les types d'import selon le texte de recherche
            if (string.IsNullOrWhiteSpace(SearchText))
            {
                // Afficher tous les types
                ImportTypes.Clear();
                foreach (var type in AvailableImportTypes)
                {
                    ImportTypes.Add(type);
                }
            }
            else
            {
                // Filtrer selon le texte
                var filtered = AvailableImportTypes
                    .Where(t => t.Title.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                               t.Description.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                
                ImportTypes.Clear();
                foreach (var type in filtered)
                {
                    ImportTypes.Add(type);
                }
            }
            
            OnPropertyChanged(nameof(HasResults));
            StatusMessage = $"üîç {ImportTypes.Count} r√©sultat(s) trouv√©(s)";
        }

        /// <summary>
        /// Commande pour revenir en arri√®re (optionnelle)
        /// </summary>
        [RelayCommand]
        private void GoBack()
        {
            StatusMessage = "Retour au menu principal...";
            
            // TODO: Impl√©menter la navigation retour si n√©cessaire
            // Cette commande peut √™tre utilis√©e pour revenir au menu principal
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Initialise les types d'import de factures disponibles
        /// </summary>
        private void InitializeImportTypes()
        {
            AvailableImportTypes.Clear();
            
            // Import de Factures Standard - Structure professionnelle classique
            AvailableImportTypes.Add(new ImportTypeInfo
            {
                Type = "FacturesStandard",
                Title = "Import Factures Standard",
                Description = "Import des factures depuis des fichiers Excel au format standard professionnel. Structure classique avec en-t√™tes normalis√©s, colonnes pr√©d√©finies et format conventionnel adapt√© aux syst√®mes de gestion standard.",
                Icon = "FileDocumentOutline", 
                IsEnabled = true,
                Status = "Standard",
                StatusColor = new SolidColorBrush(Color.FromRgb(76, 175, 80)), // Green
                SupportedFormats = ".xlsx, .xls (format standard avec en-t√™tes normalis√©s)",
                ButtonText = "IMPORTER STANDARD",
                Color = new SolidColorBrush(Color.FromRgb(67, 160, 71)) // Green moderne
            });
            
            // Import de Factures Sage 100 v15 - Structure sp√©cifique selon exemple_structure_excel.py
            AvailableImportTypes.Add(new ImportTypeInfo
            {
                Type = "FacturesSage100",
                Title = "Import Exceptionnel Sage 100 v15",
                Description = "Import sp√©cialis√© pour les factures Sage 100 v15 selon la structure d√©finie dans exemple_structure_excel.py. G√®re les clients divers (code 1999), moyens de paiement A18, et la structure sp√©cifique : 1 feuille = 1 facture.",
                Icon = "AlertCircleOutline", 
                IsEnabled = true,
                Status = "Sage 100 v15",
                StatusColor = new SolidColorBrush(Color.FromRgb(255, 193, 7)), // Amber
                SupportedFormats = ".xlsx sp√©cifique Sage 100 v15 (selon exemple_structure_excel.py)",
                ButtonText = "IMPORTER SAGE 100",
                Color = new SolidColorBrush(Color.FromRgb(255, 87, 34)) // Deep Orange
            });

            // Copier vers la collection d'affichage
            ImportTypes.Clear();
            foreach (var type in AvailableImportTypes)
            {
                ImportTypes.Add(type);
            }
            
            OnPropertyChanged(nameof(HasResults));
        }

        /// <summary>
        /// Ouvre la fen√™tre d'import Sage 100 v15
        /// </summary>
        private void OpenSage100ImportWindow()
        {
            try
            {
                var sage100ImportView = new Sage100ImportView();
                var sage100ImportViewModel = _serviceProvider.GetRequiredService<Sage100ImportViewModel>();
                sage100ImportView.DataContext = sage100ImportViewModel;
                
                var window = new Window
                {
                    Title = "Import Exceptionnel Sage 100 v15",
                    Content = sage100ImportView,
                    Width = 1400,
                    Height = 900,
                    WindowStartupLocation = WindowStartupLocation.CenterScreen,
                    WindowState = WindowState.Normal,
                    ShowInTaskbar = true,
                    ResizeMode = ResizeMode.CanResize
                };
                
                // Passer la r√©f√©rence de la fen√™tre au ViewModel pour pouvoir la fermer
                sage100ImportViewModel.ParentWindow = window;
                
                window.ShowDialog();
                StatusMessage = "üìã Fen√™tre d'import Sage 100 ferm√©e";
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå Erreur lors de l'ouverture : {ex.Message}";
                MessageBox.Show(
                    $"Impossible d'ouvrir la fen√™tre d'import Sage 100 :\n\n{ex.Message}",
                    "Erreur",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
        }

        #endregion
    }

    /// <summary>
    /// Information sur un type d'import
    /// </summary>
    public class ImportTypeInfo : ObservableObject
    {
        public string Type { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = "File";
        public bool IsEnabled { get; set; } = true;
        public string Status { get; set; } = "Disponible";
        public Brush StatusColor { get; set; } = new SolidColorBrush(Colors.Green);
        public string SupportedFormats { get; set; } = ".xlsx, .xls";
        public string ButtonText { get; set; } = "IMPORTER";
        public Brush Color { get; set; } = new SolidColorBrush(Colors.LightBlue);
    }
}
