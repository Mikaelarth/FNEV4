#!/usr/bin/env python3
"""
Script de cr√©ation de donn√©es de test pour la certification FNE
==============================================================

Ce script cr√©e des factures de test dans la base de donn√©es pour 
v√©rifier que l'interface de certification manuelle peut charger des donn√©es.

1. Cr√©e la base de donn√©es si elle n'existe pas
2. Ajoute des factures de test avec le statut "draft"
3. V√©rifie que les donn√©es sont bien ins√©r√©es

Auteur: Assistant IA
Date: D√©cembre 2024
"""

import sqlite3
import os
from datetime import datetime, timedelta
import random

# Configuration
DB_PATH = r"d:\PROJET\FNE\FNEV4\Data\Database\fnev4_centralised.db"

def create_database_structure():
    """Cr√©er la structure de base de donn√©es si elle n'existe pas"""
    print("üîß === CR√âATION STRUCTURE BASE DE DONN√âES ===")
    
    # S'assurer que le r√©pertoire existe
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Cr√©er la table FneInvoices si elle n'existe pas
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS FneInvoices (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            InvoiceNumber TEXT NOT NULL,
            InvoiceDate DATE NOT NULL,
            ClientId INTEGER,
            Amount DECIMAL(18,2),
            Status TEXT NOT NULL DEFAULT 'draft',
            CertifiedAt DATETIME NULL,
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # Cr√©er la table Clients si elle n'existe pas
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Clients (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            CompanyName TEXT NOT NULL,
            Email TEXT,
            Phone TEXT,
            Address TEXT,
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # Cr√©er la table FneConfigurations si elle n'existe pas
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS FneConfigurations (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            Name TEXT NOT NULL,
            ApiUrl TEXT NOT NULL,
            IsActive BOOLEAN DEFAULT 0,
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    conn.commit()
    conn.close()
    print("‚úÖ Structure de base de donn√©es cr√©√©e")

def create_test_clients():
    """Cr√©er des clients de test"""
    print("\nüë• === CR√âATION CLIENTS DE TEST ===")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    clients = [
        ("Entreprise Alpha SARL", "contact@alpha.fr", "01.23.45.67.89", "123 Rue de la Paix, 75001 Paris"),
        ("Beta Technologies", "info@beta-tech.fr", "01.98.76.54.32", "456 Avenue des Champs, 69001 Lyon"),
        ("Gamma Consulting", "hello@gamma.fr", "01.11.22.33.44", "789 Boulevard Central, 13001 Marseille"),
        ("Delta Services", "contact@delta.fr", "01.55.66.77.88", "321 Place de la R√©publique, 31000 Toulouse"),
        ("Epsilon Industries", "info@epsilon.fr", "01.99.88.77.66", "654 Rue de la Libert√©, 59000 Lille")
    ]
    
    cursor.execute("DELETE FROM Clients")  # Nettoyer les anciennes donn√©es
    
    for company, email, phone, address in clients:
        cursor.execute("""
            INSERT INTO Clients (CompanyName, Email, Phone, Address)
            VALUES (?, ?, ?, ?)
        """, (company, email, phone, address))
    
    conn.commit()
    print(f"‚úÖ {len(clients)} clients cr√©√©s")
    
    # R√©cup√©rer les IDs des clients cr√©√©s
    cursor.execute("SELECT Id FROM Clients")
    client_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    return client_ids

def create_test_invoices(client_ids):
    """Cr√©er des factures de test"""
    print("\nüìÑ === CR√âATION FACTURES DE TEST ===")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM FneInvoices")  # Nettoyer les anciennes donn√©es
    
    # G√©n√©rer des factures sur les 30 derniers jours
    invoices = []
    for i in range(1, 21):  # 20 factures de test
        invoice_number = f"FAC{datetime.now().year}{i:04d}"
        invoice_date = datetime.now() - timedelta(days=random.randint(0, 30))
        client_id = random.choice(client_ids)
        amount = round(random.uniform(100.0, 5000.0), 2)
        status = random.choice(["draft", "draft", "draft", "validated", "sent"])  # Plus de draft pour les tests
        
        invoices.append((invoice_number, invoice_date.date(), client_id, amount, status))
    
    cursor.executemany("""
        INSERT INTO FneInvoices (InvoiceNumber, InvoiceDate, ClientId, Amount, Status)
        VALUES (?, ?, ?, ?, ?)
    """, invoices)
    
    conn.commit()
    print(f"‚úÖ {len(invoices)} factures cr√©√©es")
    
    # Statistiques
    cursor.execute("SELECT Status, COUNT(*) FROM FneInvoices GROUP BY Status")
    stats = cursor.fetchall()
    print("üìä R√©partition par statut:")
    for status, count in stats:
        print(f"   ‚Ä¢ {status}: {count} factures")
    
    conn.close()

def create_test_fne_config():
    """Cr√©er une configuration FNE de test"""
    print("\n‚öôÔ∏è === CR√âATION CONFIGURATION FNE ===")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM FneConfigurations")  # Nettoyer les anciennes donn√©es
    
    cursor.execute("""
        INSERT INTO FneConfigurations (Name, ApiUrl, IsActive)
        VALUES (?, ?, ?)
    """, ("Configuration Test", "https://api-test.fne.fr", 1))
    
    conn.commit()
    conn.close()
    print("‚úÖ Configuration FNE active cr√©√©e")

def verify_data():
    """V√©rifier que les donn√©es ont √©t√© cr√©√©es correctement"""
    print("\nüîç === V√âRIFICATION DES DONN√âES ===")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # V√©rifier les clients
    cursor.execute("SELECT COUNT(*) FROM Clients")
    client_count = cursor.fetchone()[0]
    print(f"‚úÖ Clients: {client_count}")
    
    # V√©rifier les factures
    cursor.execute("SELECT COUNT(*) FROM FneInvoices")
    invoice_count = cursor.fetchone()[0]
    print(f"‚úÖ Factures: {invoice_count}")
    
    # V√©rifier les factures draft (disponibles pour certification)
    cursor.execute("SELECT COUNT(*) FROM FneInvoices WHERE Status = 'draft' AND CertifiedAt IS NULL")
    draft_count = cursor.fetchone()[0]
    print(f"‚úÖ Factures disponibles pour certification: {draft_count}")
    
    # V√©rifier la configuration FNE
    cursor.execute("SELECT COUNT(*) FROM FneConfigurations WHERE IsActive = 1")
    config_count = cursor.fetchone()[0]
    print(f"‚úÖ Configurations FNE actives: {config_count}")
    
    # Afficher quelques exemples
    print("\nüìã √âchantillon de factures draft:")
    cursor.execute("""
        SELECT f.InvoiceNumber, f.InvoiceDate, c.CompanyName, f.Amount, f.Status
        FROM FneInvoices f
        LEFT JOIN Clients c ON f.ClientId = c.Id
        WHERE f.Status = 'draft' AND f.CertifiedAt IS NULL
        LIMIT 5
    """)
    
    for invoice_number, invoice_date, company, amount, status in cursor.fetchall():
        print(f"   ‚Ä¢ {invoice_number} - {company or 'N/A'} - {amount}‚Ç¨ - {status}")
    
    conn.close()
    
    return draft_count > 0

def main():
    """Fonction principale"""
    print("üöÄ === CR√âATION DONN√âES TEST CERTIFICATION FNE ===")
    print(f"Base de donn√©es: {DB_PATH}")
    print("=" * 60)
    
    try:
        # Cr√©er la structure
        create_database_structure()
        
        # Cr√©er les donn√©es de test
        client_ids = create_test_clients()
        create_test_invoices(client_ids)
        create_test_fne_config()
        
        # V√©rifier
        has_data = verify_data()
        
        print("\n" + "=" * 60)
        if has_data:
            print("üéâ SUCC√àS - Donn√©es de test cr√©√©es!")
            print("L'interface de certification manuelle devrait maintenant afficher des factures.")
        else:
            print("‚ö†Ô∏è ATTENTION - Aucune facture draft trouv√©e.")
        
        print(f"\nüìç Chemin base de donn√©es: {DB_PATH}")
        print("üîÑ Relancez l'application FNEV4 et naviguez vers Certification FNE > Certification manuelle")
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()