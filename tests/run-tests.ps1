# Script PowerShell pour ex√©cuter tous les tests FNEV4
# Respecte la structure d√©di√©e aux tests

param(
    [string]$Configuration = "Debug",
    [switch]$Verbose,
    [switch]$Coverage
)

Write-Host "=== FNEV4 - Ex√©cution des Tests ===" -ForegroundColor Cyan
Write-Host "Configuration: $Configuration" -ForegroundColor Yellow
Write-Host "Dossier de tests d√©di√©: tests/" -ForegroundColor Green
Write-Host ""

# Fonction pour afficher les r√©sultats
function Show-TestResults {
    param($ExitCode, $TestType)
    
    if ($ExitCode -eq 0) {
        Write-Host "‚úÖ $TestType - SUCC√àS" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $TestType - √âCHEC (Code: $ExitCode)" -ForegroundColor Red
    }
}

try {
    # Changement vers le r√©pertoire racine du projet
    $ProjectRoot = Split-Path -Parent $PSScriptRoot
    Set-Location $ProjectRoot
    
    Write-Host "üìÅ R√©pertoire du projet: $ProjectRoot" -ForegroundColor Blue
    Write-Host ""
    
    # V√©rification de la structure des tests
    $TestStructure = @(
        "tests\FNEV4.Tests.Unit\Presentation",
        "tests\FNEV4.Tests.Integration", 
        "tests\FNEV4.Tests.E2E",
        "tests\TestData"
    )
    
    Write-Host "üîç V√©rification de la structure des tests..." -ForegroundColor Blue
    foreach ($folder in $TestStructure) {
        if (Test-Path $folder) {
            Write-Host "   ‚úÖ $folder" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  $folder (non trouv√©)" -ForegroundColor Yellow
        }
    }
    Write-Host ""
    
    # 1. Tests unitaires - Presentation
    Write-Host "üß™ Ex√©cution des tests unitaires - Presentation..." -ForegroundColor Blue
    $TestProject = "tests\FNEV4.Tests.Unit\Presentation\FNEV4.Tests.Unit.Presentation.csproj"
    
    if (Test-Path $TestProject) {
        $cmd = "dotnet test `"$TestProject`" --configuration $Configuration --logger console --verbosity normal"
        
        if ($Coverage) {
            $cmd += " --collect:`"XPlat Code Coverage`""
        }
        
        if ($Verbose) {
            Write-Host "Commande: $cmd" -ForegroundColor Gray
        }
        
        Invoke-Expression $cmd
        $UnitTestResult = $LASTEXITCODE
        Show-TestResults $UnitTestResult "Tests Unitaires"
    } else {
        Write-Host "‚ö†Ô∏è  Projet de tests unitaires non trouv√©: $TestProject" -ForegroundColor Yellow
        $UnitTestResult = 0
    }
    
    Write-Host ""
    
    # 2. Test manuel (optionnel)
    $ManualTestProject = "tests\FNEV4.Tests.Manual\FNEV4.Tests.Manual.csproj"
    if (Test-Path $ManualTestProject) {
        Write-Host "üéØ Test manuel disponible - Ex√©cution sur demande..." -ForegroundColor Blue
        $response = Read-Host "Voulez-vous lancer le test manuel de l'interface? (o/N)"
        
        if ($response -eq "o" -or $response -eq "O") {
            Write-Host "üöÄ Lancement du test manuel..." -ForegroundColor Blue
            dotnet run --project "$ManualTestProject" --configuration $Configuration
            Show-TestResults $LASTEXITCODE "Test Manuel"
        } else {
            Write-Host "‚è≠Ô∏è  Test manuel ignor√©" -ForegroundColor Yellow
        }
    }
    
    Write-Host ""
    
    # R√©sum√© final
    Write-Host "=== R√âSUM√â DES TESTS ===" -ForegroundColor Cyan
    Show-TestResults $UnitTestResult "Tests Unitaires - Presentation"
    
    if ($UnitTestResult -eq 0) {
        Write-Host ""
        Write-Host "üéâ Tous les tests ont r√©ussi!" -ForegroundColor Green
        Write-Host "‚úÖ L'interface principale est fonctionnelle" -ForegroundColor Green
        Write-Host "‚úÖ La navigation est op√©rationnelle" -ForegroundColor Green
        Write-Host "‚úÖ Les 32 sous-menus sont test√©s" -ForegroundColor Green
    } else {
        Write-Host ""
        Write-Host "‚ùå Des tests ont √©chou√© - V√©rifiez les d√©tails ci-dessus" -ForegroundColor Red
    }
    
    # Informations sur la couverture
    if ($Coverage) {
        Write-Host ""
        Write-Host "üìä Rapports de couverture g√©n√©r√©s dans TestResults/" -ForegroundColor Blue
    }
    
} catch {
    Write-Host "üí• Erreur lors de l'ex√©cution des tests:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
} finally {
    Write-Host ""
    Write-Host "üìÅ Structure des tests respect√©e - Projet propre ‚úÖ" -ForegroundColor Green
}
