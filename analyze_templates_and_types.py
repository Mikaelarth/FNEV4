#!/usr/bin/env python3
"""
Analyse des templates et types de factures FNE
V√©rifie la coh√©rence avec les sp√©cifications de l'API FNE
"""

import sqlite3
import sys
from pathlib import Path

def analyze_templates_and_types():
    """
    Analyse les templates et types de factures dans la base de donn√©es
    """
    
    db_path = Path("data/FNEV4.db")
    
    if not db_path.exists():
        print("‚ùå Base de donn√©es FNEV4.db introuvable")
        return
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        print("üîç ANALYSE DES TEMPLATES ET TYPES DE FACTURES FNE")
        print("=" * 60)
        
        # 1. Analyser les templates dans les factures
        print("\nüìã 1. TEMPLATES UTILIS√âS DANS LES FACTURES")
        print("-" * 40)
        
        cursor.execute("""
            SELECT 
                Template,
                COUNT(*) as count,
                GROUP_CONCAT(DISTINCT InvoiceNumber) as exemples
            FROM FneInvoices 
            WHERE Template IS NOT NULL 
            GROUP BY Template 
            ORDER BY count DESC
        """)
        
        templates_factures = cursor.fetchall()
        
        if templates_factures:
            for template, count, exemples in templates_factures:
                exemples_list = exemples.split(',')[:3]  # Limiter √† 3 exemples
                print(f"   üìÑ Template: '{template}' ({count} factures)")
                print(f"      Exemples: {', '.join(exemples_list)}")
        else:
            print("   ‚ö†Ô∏è Aucun template trouv√© dans les factures")
        
        # 2. Analyser les types de factures
        print("\nüìã 2. TYPES DE FACTURES")
        print("-" * 25)
        
        cursor.execute("""
            SELECT 
                InvoiceType,
                COUNT(*) as count,
                AVG(TotalAmountTTC) as montant_moyen,
                GROUP_CONCAT(DISTINCT InvoiceNumber) as exemples
            FROM FneInvoices 
            WHERE InvoiceType IS NOT NULL 
            GROUP BY InvoiceType 
            ORDER BY count DESC
        """)
        
        types_factures = cursor.fetchall()
        
        if types_factures:
            for inv_type, count, montant_moyen, exemples in types_factures:
                exemples_list = exemples.split(',')[:3]
                print(f"   üè∑Ô∏è Type: '{inv_type}' ({count} factures)")
                print(f"      Montant moyen: {montant_moyen:.2f} FCFA")
                print(f"      Exemples: {', '.join(exemples_list)}")
        else:
            print("   ‚ö†Ô∏è Aucun type de facture trouv√©")
        
        # 3. Analyser les m√©thodes de paiement
        print("\nüí≥ 3. M√âTHODES DE PAIEMENT")
        print("-" * 26)
        
        cursor.execute("""
            SELECT 
                PaymentMethod,
                COUNT(*) as count,
                SUM(TotalAmountTTC) as total_amount,
                GROUP_CONCAT(DISTINCT InvoiceNumber) as exemples
            FROM FneInvoices 
            WHERE PaymentMethod IS NOT NULL 
            GROUP BY PaymentMethod 
            ORDER BY count DESC
        """)
        
        payment_methods = cursor.fetchall()
        
        if payment_methods:
            for method, count, total_amount, exemples in payment_methods:
                exemples_list = exemples.split(',')[:3]
                print(f"   üí∞ M√©thode: '{method}' ({count} factures)")
                print(f"      Total: {total_amount:.2f} FCFA")
                print(f"      Exemples: {', '.join(exemples_list)}")
        else:
            print("   ‚ö†Ô∏è Aucune m√©thode de paiement trouv√©e")
        
        # 4. Analyser les points de vente
        print("\nüè™ 4. POINTS DE VENTE")
        print("-" * 18)
        
        cursor.execute("""
            SELECT 
                PointOfSale,
                COUNT(*) as count,
                GROUP_CONCAT(DISTINCT Template) as templates_utilises,
                GROUP_CONCAT(DISTINCT InvoiceNumber) as exemples
            FROM FneInvoices 
            WHERE PointOfSale IS NOT NULL 
            GROUP BY PointOfSale 
            ORDER BY count DESC
        """)
        
        points_of_sale = cursor.fetchall()
        
        if points_of_sale:
            for pos, count, templates, exemples in points_of_sale:
                exemples_list = exemples.split(',')[:3]
                templates_list = set(templates.split(',')) if templates else []
                print(f"   üè™ Point de vente: '{pos}' ({count} factures)")
                print(f"      Templates utilis√©s: {', '.join(templates_list)}")
                print(f"      Exemples: {', '.join(exemples_list)}")
        else:
            print("   ‚ö†Ô∏è Aucun point de vente trouv√©")
        
        # 5. Analyser la coh√©rence avec les sp√©cifications FNE
        print("\nüéØ 5. V√âRIFICATION CONFORMIT√â API FNE")
        print("-" * 38)
        
        # Templates valides selon documentation FNE
        templates_fne_valides = ["B2C", "B2B", "B2G"]
        
        # Types valides selon documentation FNE  
        types_fne_valides = ["sale", "refund", "proforma", "delivery"]
        
        # M√©thodes de paiement valides selon FNE
        payment_methods_fne_valides = [
            "cash", "mobile-money", "card", "check", 
            "transfer", "credit", "other"
        ]
        
        print("   üìö TEMPLATES FNE ATTENDUS:", ", ".join(templates_fne_valides))
        templates_actuels = [t[0] for t in templates_factures] if templates_factures else []
        templates_invalides = [t for t in templates_actuels if t not in templates_fne_valides]
        if templates_invalides:
            print(f"   ‚ùå Templates INVALIDES trouv√©s: {', '.join(templates_invalides)}")
        else:
            print("   ‚úÖ Tous les templates sont conformes FNE")
        
        print("   üè∑Ô∏è TYPES FNE ATTENDUS:", ", ".join(types_fne_valides))
        types_actuels = [t[0] for t in types_factures] if types_factures else []
        types_invalides = [t for t in types_actuels if t not in types_fne_valides]
        if types_invalides:
            print(f"   ‚ùå Types INVALIDES trouv√©s: {', '.join(types_invalides)}")
        else:
            print("   ‚úÖ Tous les types sont conformes FNE")
        
        print("   üí≥ PAIEMENTS FNE ATTENDUS:", ", ".join(payment_methods_fne_valides))
        payments_actuels = [p[0] for p in payment_methods] if payment_methods else []
        payments_invalides = [p for p in payments_actuels if p not in payment_methods_fne_valides]
        if payments_invalides:
            print(f"   ‚ùå M√©thodes INVALIDES trouv√©es: {', '.join(payments_invalides)}")
        else:
            print("   ‚úÖ Toutes les m√©thodes de paiement sont conformes FNE")
        
        # 6. Analyser des factures sp√©cifiques pour d√©bogage
        print("\nüî¨ 6. ANALYSE FACTURES SP√âCIFIQUES")
        print("-" * 32)
        
        factures_test = ["556452", "556469"]
        
        for facture_num in factures_test:
            cursor.execute("""
                SELECT 
                    InvoiceNumber,
                    Template,
                    InvoiceType,
                    PaymentMethod,
                    PointOfSale,
                    EstablishmentName,
                    ClientCode,
                    TotalAmountTTC
                FROM FneInvoices 
                WHERE InvoiceNumber = ?
            """, (facture_num,))
            
            facture = cursor.fetchone()
            
            if facture:
                (num, template, inv_type, payment, pos, establishment, 
                 client_code, amount) = facture
                
                print(f"\n   üìÑ FACTURE {num}:")
                print(f"      Template: '{template}'")
                print(f"      Type: '{inv_type}'")
                print(f"      Paiement: '{payment}'")
                print(f"      Point de vente: '{pos}'")
                print(f"      √âtablissement: '{establishment}'")
                print(f"      Client: {client_code}")
                print(f"      Montant: {amount} FCFA")
                
                # Validation FNE pour cette facture
                issues = []
                if template not in templates_fne_valides:
                    issues.append(f"Template '{template}' invalide")
                if inv_type not in types_fne_valides:
                    issues.append(f"Type '{inv_type}' invalide")
                if payment not in payment_methods_fne_valides:
                    issues.append(f"Paiement '{payment}' invalide")
                
                if issues:
                    print(f"      ‚ùå PROBL√àMES FNE: {', '.join(issues)}")
                else:
                    print("      ‚úÖ CONFORME FNE")
            else:
                print(f"   ‚ùå Facture {facture_num} non trouv√©e")
        
        print(f"\nüéØ RECOMMANDATIONS")
        print("-" * 15)
        
        # Recommandations bas√©es sur l'analyse
        if not templates_factures:
            print("   üîß URGENT: Configurer les templates dans les factures")
        
        if not payment_methods:
            print("   üîß URGENT: Configurer les m√©thodes de paiement")
        
        if templates_invalides:
            print(f"   üîß Corriger les templates invalides: {', '.join(templates_invalides)}")
            print("      ‚Üí Utiliser: B2C (client), B2B (entreprise), B2G (gouvernement)")
        
        if types_invalides:
            print(f"   üîß Corriger les types invalides: {', '.join(types_invalides)}")
            print("      ‚Üí Utiliser: sale (vente), refund (avoir), proforma, delivery")
        
        if payments_invalides:
            print(f"   üîß Corriger les paiements invalides: {', '.join(payments_invalides)}")
            print("      ‚Üí Utiliser: cash, mobile-money, card, transfer, etc.")
    
    except sqlite3.Error as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")
    
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    analyze_templates_and_types()
    print("\n‚úÖ Analyse termin√©e")