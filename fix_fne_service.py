#!/usr/bin/env python3
"""
Correctif Service FNE - Format API selon FNE-procedureapi.md
Corrige le format de donn√©es pour correspondre exactement √† la documentation officielle DGI
"""

import os
from pathlib import Path

def create_corrected_fne_service():
    """
    Cr√©e un service FNE corrig√© selon la documentation officielle
    """
    
    service_content = '''using System.Text.Json;
using Microsoft.Extensions.Logging;
using FNEV4.Core.Entities;
using FNEV4.Core.Interfaces.Services.Fne;
using FNEV4.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using System.Text;

namespace FNEV4.Infrastructure.Services
{
    /// <summary>
    /// Service de certification FNE CORRIG√â selon FNE-procedureapi.md OFFICIEL
    /// Impl√©mentation EXACTE selon documentation DGI Mai 2025
    /// </summary>
    public partial class FneCertificationService : IFneCertificationService
    {
        /// <summary>
        /// CORRECTION MAJEURE: Conversion au format FNE OFFICIEL selon documentation
        /// </summary>
        private async Task<object> ConvertToFneApiFormatAsync(FneInvoice invoice)
        {
            _logger.LogDebug("üîß CONVERSION FORMAT FNE OFFICIEL - Facture {InvoiceId}", invoice.Id);

            var items = await _context.FneInvoiceItems
                .Where(i => i.FneInvoiceId == invoice.Id)
                .ToListAsync();

            // ‚úÖ FORMAT OFFICIEL selon FNE-procedureapi.md Section V.1
            var fnePayload = new
            {
                // === PARAM√àTRES OBLIGATOIRES FNE ===
                invoiceType = "sale", // Obligatoire: "sale", "purchase"
                
                paymentMethod = ConvertToFnePaymentMethod(invoice.PaymentMethod), // Obligatoire
                
                template = DetermineTemplate(invoice), // Obligatoire: B2C, B2B, B2G, B2F
                
                isRne = false, // Obligatoire: si reli√© √† un re√ßu
                
                // === CLIENT INFORMATION (Format FNE) ===
                clientCompanyName = GetClientName(invoice), // Obligatoire
                
                clientPhone = GetClientPhone(invoice), // Obligatoire: format int
                
                clientEmail = GetClientEmail(invoice), // Obligatoire
                
                // === CLIENT NCC (Obligatoire si B2B) ===
                clientNcc = GetClientNccForTemplate(invoice),
                
                // === √âTABLISSEMENT (Obligatoires FNE) ===
                pointOfSale = GetPointOfSale(invoice), // Obligatoire
                
                establishment = GetEstablishment(invoice), // Obligatoire
                
                // === MESSAGES OPTIONNELS ===
                commercialMessage = "", // Optionnel
                footer = $"Facture g√©n√©r√©e par FNEV4 - {DateTime.Now:dd/MM/yyyy}", // Optionnel
                
                // === DEVISE (Correct pour C√¥te d'Ivoire) ===
                foreignCurrency = "", // Vide pour FCFA local
                foreignCurrencyRate = 0, // 0 pour devise locale
                
                // === ARTICLES (Format FNE exact) ===
                items = items.Select(item => new
                {
                    // Taxes selon format FNE
                    taxes = new[] { DetermineItemTaxType(item) }, // Obligatoire: ["TVA"], ["TVAB"], ["TVAC"], ["TVAD"]
                    
                    // Taxes personnalis√©es (optionnel)
                    customTaxes = new object[0], // Array vide si pas de taxes custom
                    
                    reference = item.ItemCode ?? $"ART-{item.Id}", // Optionnel mais recommand√©
                    
                    description = item.Description ?? "Article", // Obligatoire
                    
                    quantity = (double)item.Quantity, // Obligatoire: format number
                    
                    amount = (double)item.UnitPrice, // Obligatoire: Prix unitaire HT
                    
                    discount = (double)(item.DiscountAmount ?? 0), // Optionnel: remise article
                    
                    measurementUnit = item.MeasurementUnit ?? "pcs" // Optionnel: unit√© de mesure
                }).ToArray(),
                
                // === TAXES GLOBALES ===
                taxes = "TVA", // Obligatoire: Type de TVA global
                
                // === REMISE GLOBALE ===
                discount = (double)(invoice.DiscountAmount ?? 0) // Optionnel: remise sur total HT
            };

            _logger.LogInformation("‚úÖ PAYLOAD FNE OFFICIEL g√©n√©r√© - Template: {Template}, Articles: {ItemCount}", 
                fnePayload.template, items.Count);

            return fnePayload;
        }

        /// <summary>
        /// Conversion m√©thode de paiement vers format FNE OFFICIEL
        /// Selon Annexe 1 du document FNE-procedureapi.md
        /// </summary>
        private string ConvertToFnePaymentMethod(string? paymentMethod)
        {
            return paymentMethod?.ToLower() switch
            {
                "esp√®ces" or "espece" or "cash" => "cash",
                "carte bancaire" or "carte" => "card", 
                "ch√®que" or "cheque" => "check",
                "mobile money" or "mobile-money" or "orange money" => "mobile-money",
                "virement" or "virement bancaire" => "transfer",
                "√† terme" or "credit" or "cr√©dit" => "deferred",
                _ => "cash" // D√©faut: esp√®ces
            };
        }

        /// <summary>
        /// D√©termine le template B2C/B2B/B2G/B2F selon client
        /// Selon Section V.1 - Template obligatoire
        /// </summary>
        private string DetermineTemplate(FneInvoice invoice)
        {
            // B2B: Client entreprise avec NCC
            if (!string.IsNullOrEmpty(invoice.Client?.ClientNcc))
            {
                return "B2B";
            }
            
            // B2G: Client gouvernemental (√† d√©terminer selon logique m√©tier)
            // if (IsGovernmentClient(invoice.Client))
            // {
            //     return "B2G";
            // }
            
            // B2F: Client international (√† d√©terminer selon logique m√©tier)
            // if (IsInternationalClient(invoice.Client))
            // {
            //     return "B2F";
            // }
            
            // B2C: Client particulier (par d√©faut)
            return "B2C";
        }

        /// <summary>
        /// Obtient le NCC client si template B2B (obligatoire pour B2B)
        /// </summary>
        private string? GetClientNccForTemplate(FneInvoice invoice)
        {
            var template = DetermineTemplate(invoice);
            if (template == "B2B")
            {
                return invoice.Client?.ClientNcc;
            }
            return null; // Pas obligatoire pour B2C, B2G, B2F
        }

        /// <summary>
        /// Obtient le t√©l√©phone client au format requis (int)
        /// </summary>
        private long GetClientPhone(FneInvoice invoice)
        {
            var phone = invoice.Client?.Phone ?? "0000000000";
            
            // Nettoyer le num√©ro (enlever espaces, tirets, etc.)
            var cleanPhone = new string(phone.Where(char.IsDigit).ToArray());
            
            // Convertir en long (format requis par API FNE)
            if (long.TryParse(cleanPhone, out var phoneNumber))
            {
                return phoneNumber;
            }
            
            return 0000000000; // Num√©ro par d√©faut si conversion √©choue
        }

        /// <summary>
        /// Obtient l'email client (obligatoire)
        /// </summary>
        private string GetClientEmail(FneInvoice invoice)
        {
            return invoice.Client?.Email ?? "client@example.com";
        }

        /// <summary>
        /// D√©termine le point de vente (obligatoire FNE)
        /// </summary>
        private string GetPointOfSale(FneInvoice invoice)
        {
            // √Ä personnaliser selon la logique m√©tier de l'entreprise
            return invoice.PointOfSale ?? "POS-001";
        }

        /// <summary>
        /// D√©termine l'√©tablissement (obligatoire FNE)
        /// </summary>
        private string GetEstablishment(FneInvoice invoice)
        {
            // √Ä personnaliser selon la logique m√©tier de l'entreprise
            return invoice.Establishment ?? "√âtablissement Principal";
        }

        /// <summary>
        /// D√©termine le type de TVA pour un article
        /// Selon Annexe 1: TVA (18%), TVAB (9%), TVAC (0%), TVAD (0%)
        /// </summary>
        private string DetermineItemTaxType(FneInvoiceItem item)
        {
            var vatRate = item.VatRate;
            
            return vatRate switch
            {
                18 or 0.18m => "TVA",    // TVA normale 18%
                9 or 0.09m => "TVAB",    // TVA r√©duite 9%
                0 => "TVAC",             // TVA exon√©r√©e conventionnelle 0%
                _ => "TVA"               // Par d√©faut TVA normale
            };
            
            // Note: TVAD est pour TVA exon√©r√©e l√©gale TEE et RME
        }
    }
}'''

    # Cr√©er le fichier correctif
    output_path = Path("src/FNEV4.Infrastructure/Services/FneCertificationService.Corrected.cs")
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(service_content)
    
    print(f"‚úÖ Service FNE corrig√© cr√©√©: {output_path}")
    
    # Instructions
    instructions = '''
üîß INSTRUCTIONS DE CORRECTION CRITIQUES

1. REMPLACER la m√©thode ConvertToFneApiFormatAsync dans FneCertificationService.cs
2. AJOUTER les nouvelles m√©thodes utilitaires
3. METTRE √Ä JOUR les propri√©t√©s manquantes dans FneInvoice:
   - PointOfSale
   - Establishment
4. TESTER avec le format corrig√©

üìã CHANGEMENTS CRITIQUES:
‚úÖ Format payload conforme FNE-procedureapi.md
‚úÖ Devise corrig√©e: FCFA (C√¥te d'Ivoire) 
‚úÖ Param√®tres obligatoires FNE ajout√©s
‚úÖ Types de paiement selon documentation
‚úÖ Templates B2C/B2B/B2G/B2F
‚úÖ Format taxes selon Annexe 1

‚ö†Ô∏è L'erreur "Service provider non disponible" vient du format incorrect des donn√©es !
'''
    
    print(instructions)

if __name__ == "__main__":
    print("üîß G√âN√âRATION CORRECTIF SERVICE FNE")
    print("=" * 60)
    create_corrected_fne_service()