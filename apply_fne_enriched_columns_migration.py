#!/usr/bin/env python3
"""
Script d'application de la migration FNE enrichie
Ajoute les nouvelles colonnes pour exploiter toutes les donn√©es de l'API FNE DGI
Auteur: Assistant IA
Date: 17/09/2025 23:58
"""

import sqlite3
import os
import sys
from datetime import datetime

def apply_fne_enriched_columns_migration():
    """Applique la migration pour ajouter les colonnes FNE enrichies"""
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'FNEV4.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
        
    print(f"üîç Application de la migration FNE enrichie sur: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier d'abord si les colonnes existent d√©j√†
        cursor.execute("PRAGMA table_info(FneInvoices)")
        columns = [column[1] for column in cursor.fetchall()]
        
        print(f"üìã Colonnes existantes dans FneInvoices: {len(columns)}")
        
        # Liste des nouvelles colonnes √† ajouter
        new_columns = [
            ("FneStickerBalance", "INTEGER"),
            ("FneInvoiceId", "TEXT"),
            ("FneDownloadUrl", "TEXT"),
            ("FneCertifiedInvoiceDetails", "TEXT"),
            ("FneHasWarning", "INTEGER DEFAULT 0"),
            ("FneWarningMessage", "TEXT"),
            ("FneCompanyNcc", "TEXT"),
            ("FnePublicVerificationToken", "TEXT")
        ]
        
        added_columns = []
        
        for column_name, column_type in new_columns:
            if column_name not in columns:
                try:
                    sql = f"ALTER TABLE FneInvoices ADD COLUMN {column_name} {column_type}"
                    print(f"‚ûï Ajout colonne: {column_name} ({column_type})")
                    cursor.execute(sql)
                    added_columns.append(column_name)
                except sqlite3.Error as e:
                    print(f"‚ö†Ô∏è  Erreur ajout {column_name}: {e}")
            else:
                print(f"‚úÖ Colonne {column_name} existe d√©j√†")
        
        # Valider les changements
        conn.commit()
        
        # V√©rifier le r√©sultat
        cursor.execute("PRAGMA table_info(FneInvoices)")
        final_columns = [column[1] for column in cursor.fetchall()]
        
        print(f"‚úÖ Migration termin√©e !")
        print(f"üìä Colonnes totales apr√®s migration: {len(final_columns)}")
        print(f"üÜï Nouvelles colonnes ajout√©es: {len(added_columns)}")
        
        if added_columns:
            print(f"üìù Colonnes ajout√©es:")
            for col in added_columns:
                print(f"   - {col}")
        
        # Test de la structure √©tendue
        cursor.execute("""
            SELECT COUNT(*) as total_invoices,
                   COUNT(FneReference) as with_reference,
                   COUNT(VerificationToken) as with_token,
                   COUNT(FneStickerBalance) as with_balance
            FROM FneInvoices
        """)
        
        stats = cursor.fetchone()
        if stats:
            print(f"üìà Statistiques apr√®s migration:")
            print(f"   - Total factures: {stats[0]}")
            print(f"   - Avec r√©f√©rence FNE: {stats[1]}")
            print(f"   - Avec token v√©rification: {stats[2]}")
            print(f"   - Nouvelles donn√©es balance: {stats[3]}")
        
        conn.close()
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå Erreur SQLite: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def main():
    """Point d'entr√©e principal"""
    print("=" * 60)
    print("üöÄ MIGRATION FNE ENRICHIE - EXPLOITATION MAXIMALE API DGI")
    print("=" * 60)
    
    success = apply_fne_enriched_columns_migration()
    
    print("=" * 60)
    if success:
        print("‚úÖ MIGRATION R√âUSSIE!")
        print("üéØ Le syst√®me peut maintenant exploiter toutes les donn√©es FNE:")
        print("   ‚Ä¢ Balance de stickers en temps r√©el")
        print("   ‚Ä¢ ID facture FNE pour les avoirs")
        print("   ‚Ä¢ URL de t√©l√©chargement PDF certifi√©")
        print("   ‚Ä¢ D√©tails complets facture certifi√©e")
        print("   ‚Ä¢ Warnings et alertes DGI")
        print("   ‚Ä¢ Token de v√©rification publique")
        print("   ‚Ä¢ NCC entreprise retourn√© par l'API")
    else:
        print("‚ùå √âCHEC DE LA MIGRATION")
        sys.exit(1)

if __name__ == "__main__":
    main()