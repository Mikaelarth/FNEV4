#!/usr/bin/env python3
"""
Script de validation des am√©liorations de performance pour ListeClientsView
"""

import os
import sys

def check_xaml_optimizations():
    """V√©rifie que les optimisations de performance sont en place dans le XAML"""
    xaml_file = r"src\FNEV4.Presentation\Views\GestionClients\ListeClientsView.xaml"
    
    if not os.path.exists(xaml_file):
        print("‚ùå Fichier XAML non trouv√©")
        return False
    
    with open(xaml_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier les optimisations de virtualisation
    optimizations = {
        'EnableRowVirtualization="True"': "Virtualisation des lignes",
        'EnableColumnVirtualization="True"': "Virtualisation des colonnes", 
        'VirtualizingPanel.IsVirtualizing="True"': "Panel de virtualisation",
        'VirtualizingPanel.VirtualizationMode="Recycling"': "Mode de recyclage",
        'ScrollViewer.CanContentScroll="True"': "D√©filement du contenu",
        'ScrollViewer.IsDeferredScrollingEnabled="True"': "D√©filement diff√©r√©"
    }
    
    missing_optimizations = []
    for optimization, description in optimizations.items():
        if optimization not in content:
            missing_optimizations.append(f"  - {description} ({optimization})")
    
    if missing_optimizations:
        print("‚ùå Optimisations manquantes:")
        for missing in missing_optimizations:
            print(missing)
        return False
    
    print("‚úÖ Optimisations de virtualisation DataGrid pr√©sentes")
    
    # V√©rifier les corrections de binding
    bindings = {
        'ItemsSource="{Binding PageSizes}"': "Binding PageSizes",
        'SelectedItem="{Binding PageSize}"': "Binding PageSize", 
        'Text="{Binding TotalCount': "Binding TotalCount"
    }
    
    missing_bindings = []
    for binding, description in bindings.items():
        if binding not in content:
            missing_bindings.append(f"  - {description}")
    
    if missing_bindings:
        print("‚ùå Bindings incorrects:")
        for missing in missing_bindings:
            print(missing)
        return False
    
    print("‚úÖ Bindings de pagination corrig√©s")
    
    # V√©rifier que MaterialDesignChip n'est plus utilis√©
    if 'MaterialDesignChip' in content:
        print("‚ùå R√©f√©rence MaterialDesignChip encore pr√©sente")
        return False
    
    print("‚úÖ Composant MaterialDesignChip remplac√© par Border")
    
    return True

def check_viewmodel_optimizations():
    """V√©rifie que les optimisations du ViewModel sont en place"""
    viewmodel_file = r"src\FNEV4.Presentation\ViewModels\GestionClients\ListeClientsViewModel.cs"
    
    if not os.path.exists(viewmodel_file):
        print("‚ùå Fichier ViewModel non trouv√©")
        return False
    
    with open(viewmodel_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que Task.Run a √©t√© remplac√© par ExecuteAsync
    if 'Task.Run(LoadClientsAsync)' in content:
        print("‚ùå Task.Run(LoadClientsAsync) encore pr√©sent - devrait √™tre LoadClientsCommand.ExecuteAsync(null)")
        return False
    
    print("‚úÖ Appels Task.Run remplac√©s par ExecuteAsync")
    
    # V√©rifier que LoadClientsCommand.ExecuteAsync est utilis√©
    if 'LoadClientsCommand.ExecuteAsync(null)' not in content:
        print("‚ùå LoadClientsCommand.ExecuteAsync(null) non trouv√©")
        return False
    
    print("‚úÖ M√©thodes OnPropertyChanged utilisent ExecuteAsync")
    
    return True

def main():
    print("üîç Validation des am√©liorations de performance")
    print("=" * 55)
    
    xaml_ok = check_xaml_optimizations()
    print()
    viewmodel_ok = check_viewmodel_optimizations()
    
    print("\n" + "=" * 55)
    
    if xaml_ok and viewmodel_ok:
        print("üéâ Toutes les am√©liorations de performance valid√©es!")
        print("   - DataGrid optimis√© avec virtualisation")
        print("   - Bindings de pagination corrig√©s") 
        print("   - Crash MaterialDesignChip r√©solu")
        print("   - ViewModel optimis√© avec ExecuteAsync")
        print("\nüí° L'interface devrait maintenant √™tre plus rapide et le combo 'par page' fonctionnel")
        return 0
    else:
        print("‚ùå Certaines am√©liorations manquent")
        return 1

if __name__ == "__main__":
    sys.exit(main())
